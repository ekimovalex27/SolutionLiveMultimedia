//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAndLoadTestService.LiveMultimediaService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultimediaFile", Namespace="http://schemas.datacontract.org/2004/07/LiveMultimediaData")]
    [System.SerializableAttribute()]
    public partial class MultimediaFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlbumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeywordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MultimediaFileGUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeMultimediaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isSelectMultimediaFileField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Album {
            get {
                return this.AlbumField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumField, value) != true)) {
                    this.AlbumField = value;
                    this.RaisePropertyChanged("Album");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comments {
            get {
                return this.CommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsField, value) != true)) {
                    this.CommentsField = value;
                    this.RaisePropertyChanged("Comments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullPath {
            get {
                return this.FullPathField;
            }
            set {
                if ((object.ReferenceEquals(this.FullPathField, value) != true)) {
                    this.FullPathField = value;
                    this.RaisePropertyChanged("FullPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Keywords {
            get {
                return this.KeywordsField;
            }
            set {
                if ((object.ReferenceEquals(this.KeywordsField, value) != true)) {
                    this.KeywordsField = value;
                    this.RaisePropertyChanged("Keywords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MultimediaFileGUID {
            get {
                return this.MultimediaFileGUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MultimediaFileGUIDField, value) != true)) {
                    this.MultimediaFileGUIDField = value;
                    this.RaisePropertyChanged("MultimediaFileGUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Source {
            get {
                return this.SourceField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceField, value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeMultimedia {
            get {
                return this.TypeMultimediaField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeMultimediaField, value) != true)) {
                    this.TypeMultimediaField = value;
                    this.RaisePropertyChanged("TypeMultimedia");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isSelectMultimediaFile {
            get {
                return this.isSelectMultimediaFileField;
            }
            set {
                if ((this.isSelectMultimediaFileField.Equals(value) != true)) {
                    this.isSelectMultimediaFileField = value;
                    this.RaisePropertyChanged("isSelectMultimediaFile");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OAuthObjectFolder", Namespace="http://schemas.datacontract.org/2004/07/LiveMultimediaOAuth")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.OAuthObjectFolder[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.OAuthObjectAudio[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.OAuthObjectAudio))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.OAuthToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(object[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(long[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.MultimediaFile[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.MultimediaFile))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.MultimediaSource[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.MultimediaSource))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.PlaylistObject[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.PlaylistObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.enumTypeLog))]
    public partial class OAuthObjectFolder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string accessshared_withobjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int countField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string created_timeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object[] dataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object fromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idfromobjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool is_embeddableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string linkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string namefromobjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string parent_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object shared_withField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string typeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string updated_timeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string upload_locationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="access (shared_with object)")]
        public string accessshared_withobject {
            get {
                return this.accessshared_withobjectField;
            }
            set {
                if ((object.ReferenceEquals(this.accessshared_withobjectField, value) != true)) {
                    this.accessshared_withobjectField = value;
                    this.RaisePropertyChanged("accessshared_withobject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int count {
            get {
                return this.countField;
            }
            set {
                if ((this.countField.Equals(value) != true)) {
                    this.countField = value;
                    this.RaisePropertyChanged("count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string created_time {
            get {
                return this.created_timeField;
            }
            set {
                if ((object.ReferenceEquals(this.created_timeField, value) != true)) {
                    this.created_timeField = value;
                    this.RaisePropertyChanged("created_time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object[] data {
            get {
                return this.dataField;
            }
            set {
                if ((object.ReferenceEquals(this.dataField, value) != true)) {
                    this.dataField = value;
                    this.RaisePropertyChanged("data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object from {
            get {
                return this.fromField;
            }
            set {
                if ((object.ReferenceEquals(this.fromField, value) != true)) {
                    this.fromField = value;
                    this.RaisePropertyChanged("from");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="id (from object)")]
        public string idfromobject {
            get {
                return this.idfromobjectField;
            }
            set {
                if ((object.ReferenceEquals(this.idfromobjectField, value) != true)) {
                    this.idfromobjectField = value;
                    this.RaisePropertyChanged("idfromobject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool is_embeddable {
            get {
                return this.is_embeddableField;
            }
            set {
                if ((this.is_embeddableField.Equals(value) != true)) {
                    this.is_embeddableField = value;
                    this.RaisePropertyChanged("is_embeddable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string link {
            get {
                return this.linkField;
            }
            set {
                if ((object.ReferenceEquals(this.linkField, value) != true)) {
                    this.linkField = value;
                    this.RaisePropertyChanged("link");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="name (from object)")]
        public string namefromobject {
            get {
                return this.namefromobjectField;
            }
            set {
                if ((object.ReferenceEquals(this.namefromobjectField, value) != true)) {
                    this.namefromobjectField = value;
                    this.RaisePropertyChanged("namefromobject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parent_id {
            get {
                return this.parent_idField;
            }
            set {
                if ((object.ReferenceEquals(this.parent_idField, value) != true)) {
                    this.parent_idField = value;
                    this.RaisePropertyChanged("parent_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object shared_with {
            get {
                return this.shared_withField;
            }
            set {
                if ((object.ReferenceEquals(this.shared_withField, value) != true)) {
                    this.shared_withField = value;
                    this.RaisePropertyChanged("shared_with");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string type {
            get {
                return this.typeField;
            }
            set {
                if ((object.ReferenceEquals(this.typeField, value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string updated_time {
            get {
                return this.updated_timeField;
            }
            set {
                if ((object.ReferenceEquals(this.updated_timeField, value) != true)) {
                    this.updated_timeField = value;
                    this.RaisePropertyChanged("updated_time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string upload_location {
            get {
                return this.upload_locationField;
            }
            set {
                if ((object.ReferenceEquals(this.upload_locationField, value) != true)) {
                    this.upload_locationField = value;
                    this.RaisePropertyChanged("upload_location");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OAuthObjectAudio", Namespace="http://schemas.datacontract.org/2004/07/LiveMultimediaOAuth")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.OAuthObjectFolder[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.OAuthObjectFolder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.OAuthObjectAudio[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.OAuthToken))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(object[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(long[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.MultimediaFile[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.MultimediaFile))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.MultimediaSource[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.MultimediaSource))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.PlaylistObject[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.PlaylistObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebAndLoadTestService.LiveMultimediaService.enumTypeLog))]
    public partial class OAuthObjectAudio : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string accessshared_withobjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string albumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string album_artistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string artistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int comments_countField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool comments_enabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string created_timeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object[] dataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int durationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object fromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string genreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idfromobjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool is_embeddableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string linkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string namefromobjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string parent_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string pictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object shared_withField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int sizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string sourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string titleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string typeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string updated_timeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string upload_locationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="access (shared_with object)")]
        public string accessshared_withobject {
            get {
                return this.accessshared_withobjectField;
            }
            set {
                if ((object.ReferenceEquals(this.accessshared_withobjectField, value) != true)) {
                    this.accessshared_withobjectField = value;
                    this.RaisePropertyChanged("accessshared_withobject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string album {
            get {
                return this.albumField;
            }
            set {
                if ((object.ReferenceEquals(this.albumField, value) != true)) {
                    this.albumField = value;
                    this.RaisePropertyChanged("album");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string album_artist {
            get {
                return this.album_artistField;
            }
            set {
                if ((object.ReferenceEquals(this.album_artistField, value) != true)) {
                    this.album_artistField = value;
                    this.RaisePropertyChanged("album_artist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string artist {
            get {
                return this.artistField;
            }
            set {
                if ((object.ReferenceEquals(this.artistField, value) != true)) {
                    this.artistField = value;
                    this.RaisePropertyChanged("artist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int comments_count {
            get {
                return this.comments_countField;
            }
            set {
                if ((this.comments_countField.Equals(value) != true)) {
                    this.comments_countField = value;
                    this.RaisePropertyChanged("comments_count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool comments_enabled {
            get {
                return this.comments_enabledField;
            }
            set {
                if ((this.comments_enabledField.Equals(value) != true)) {
                    this.comments_enabledField = value;
                    this.RaisePropertyChanged("comments_enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string created_time {
            get {
                return this.created_timeField;
            }
            set {
                if ((object.ReferenceEquals(this.created_timeField, value) != true)) {
                    this.created_timeField = value;
                    this.RaisePropertyChanged("created_time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object[] data {
            get {
                return this.dataField;
            }
            set {
                if ((object.ReferenceEquals(this.dataField, value) != true)) {
                    this.dataField = value;
                    this.RaisePropertyChanged("data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int duration {
            get {
                return this.durationField;
            }
            set {
                if ((this.durationField.Equals(value) != true)) {
                    this.durationField = value;
                    this.RaisePropertyChanged("duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object from {
            get {
                return this.fromField;
            }
            set {
                if ((object.ReferenceEquals(this.fromField, value) != true)) {
                    this.fromField = value;
                    this.RaisePropertyChanged("from");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string genre {
            get {
                return this.genreField;
            }
            set {
                if ((object.ReferenceEquals(this.genreField, value) != true)) {
                    this.genreField = value;
                    this.RaisePropertyChanged("genre");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="id (from object)")]
        public string idfromobject {
            get {
                return this.idfromobjectField;
            }
            set {
                if ((object.ReferenceEquals(this.idfromobjectField, value) != true)) {
                    this.idfromobjectField = value;
                    this.RaisePropertyChanged("idfromobject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool is_embeddable {
            get {
                return this.is_embeddableField;
            }
            set {
                if ((this.is_embeddableField.Equals(value) != true)) {
                    this.is_embeddableField = value;
                    this.RaisePropertyChanged("is_embeddable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string link {
            get {
                return this.linkField;
            }
            set {
                if ((object.ReferenceEquals(this.linkField, value) != true)) {
                    this.linkField = value;
                    this.RaisePropertyChanged("link");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="name (from object)")]
        public string namefromobject {
            get {
                return this.namefromobjectField;
            }
            set {
                if ((object.ReferenceEquals(this.namefromobjectField, value) != true)) {
                    this.namefromobjectField = value;
                    this.RaisePropertyChanged("namefromobject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parent_id {
            get {
                return this.parent_idField;
            }
            set {
                if ((object.ReferenceEquals(this.parent_idField, value) != true)) {
                    this.parent_idField = value;
                    this.RaisePropertyChanged("parent_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string picture {
            get {
                return this.pictureField;
            }
            set {
                if ((object.ReferenceEquals(this.pictureField, value) != true)) {
                    this.pictureField = value;
                    this.RaisePropertyChanged("picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object shared_with {
            get {
                return this.shared_withField;
            }
            set {
                if ((object.ReferenceEquals(this.shared_withField, value) != true)) {
                    this.shared_withField = value;
                    this.RaisePropertyChanged("shared_with");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int size {
            get {
                return this.sizeField;
            }
            set {
                if ((this.sizeField.Equals(value) != true)) {
                    this.sizeField = value;
                    this.RaisePropertyChanged("size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string source {
            get {
                return this.sourceField;
            }
            set {
                if ((object.ReferenceEquals(this.sourceField, value) != true)) {
                    this.sourceField = value;
                    this.RaisePropertyChanged("source");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string title {
            get {
                return this.titleField;
            }
            set {
                if ((object.ReferenceEquals(this.titleField, value) != true)) {
                    this.titleField = value;
                    this.RaisePropertyChanged("title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string type {
            get {
                return this.typeField;
            }
            set {
                if ((object.ReferenceEquals(this.typeField, value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string updated_time {
            get {
                return this.updated_timeField;
            }
            set {
                if ((object.ReferenceEquals(this.updated_timeField, value) != true)) {
                    this.updated_timeField = value;
                    this.RaisePropertyChanged("updated_time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string upload_location {
            get {
                return this.upload_locationField;
            }
            set {
                if ((object.ReferenceEquals(this.upload_locationField, value) != true)) {
                    this.upload_locationField = value;
                    this.RaisePropertyChanged("upload_location");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OAuthToken", Namespace="http://schemas.datacontract.org/2004/07/LiveMultimediaOAuth")]
    [System.SerializableAttribute()]
    public partial class OAuthToken : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string access_tokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string authentication_tokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string expires_inField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string refresh_tokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string scopeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string access_token {
            get {
                return this.access_tokenField;
            }
            set {
                if ((object.ReferenceEquals(this.access_tokenField, value) != true)) {
                    this.access_tokenField = value;
                    this.RaisePropertyChanged("access_token");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string authentication_token {
            get {
                return this.authentication_tokenField;
            }
            set {
                if ((object.ReferenceEquals(this.authentication_tokenField, value) != true)) {
                    this.authentication_tokenField = value;
                    this.RaisePropertyChanged("authentication_token");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string expires_in {
            get {
                return this.expires_inField;
            }
            set {
                if ((object.ReferenceEquals(this.expires_inField, value) != true)) {
                    this.expires_inField = value;
                    this.RaisePropertyChanged("expires_in");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string refresh_token {
            get {
                return this.refresh_tokenField;
            }
            set {
                if ((object.ReferenceEquals(this.refresh_tokenField, value) != true)) {
                    this.refresh_tokenField = value;
                    this.RaisePropertyChanged("refresh_token");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string scope {
            get {
                return this.scopeField;
            }
            set {
                if ((object.ReferenceEquals(this.scopeField, value) != true)) {
                    this.scopeField = value;
                    this.RaisePropertyChanged("scope");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultimediaSource", Namespace="http://schemas.datacontract.org/2004/07/LiveMultimediaData")]
    [System.SerializableAttribute()]
    public partial class MultimediaSource : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdTypeMultimediaSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameMultimediaSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleBackColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleBorderColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StyleFontSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleForeColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StyleHeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StyleWidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleMultimediaSourceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdTypeMultimediaSource {
            get {
                return this.IdTypeMultimediaSourceField;
            }
            set {
                if ((this.IdTypeMultimediaSourceField.Equals(value) != true)) {
                    this.IdTypeMultimediaSourceField = value;
                    this.RaisePropertyChanged("IdTypeMultimediaSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameMultimediaSource {
            get {
                return this.NameMultimediaSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.NameMultimediaSourceField, value) != true)) {
                    this.NameMultimediaSourceField = value;
                    this.RaisePropertyChanged("NameMultimediaSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StyleBackColor {
            get {
                return this.StyleBackColorField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleBackColorField, value) != true)) {
                    this.StyleBackColorField = value;
                    this.RaisePropertyChanged("StyleBackColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StyleBorderColor {
            get {
                return this.StyleBorderColorField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleBorderColorField, value) != true)) {
                    this.StyleBorderColorField = value;
                    this.RaisePropertyChanged("StyleBorderColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StyleFontSize {
            get {
                return this.StyleFontSizeField;
            }
            set {
                if ((this.StyleFontSizeField.Equals(value) != true)) {
                    this.StyleFontSizeField = value;
                    this.RaisePropertyChanged("StyleFontSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StyleForeColor {
            get {
                return this.StyleForeColorField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleForeColorField, value) != true)) {
                    this.StyleForeColorField = value;
                    this.RaisePropertyChanged("StyleForeColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StyleHeight {
            get {
                return this.StyleHeightField;
            }
            set {
                if ((this.StyleHeightField.Equals(value) != true)) {
                    this.StyleHeightField = value;
                    this.RaisePropertyChanged("StyleHeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StyleName {
            get {
                return this.StyleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleNameField, value) != true)) {
                    this.StyleNameField = value;
                    this.RaisePropertyChanged("StyleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StyleWidth {
            get {
                return this.StyleWidthField;
            }
            set {
                if ((this.StyleWidthField.Equals(value) != true)) {
                    this.StyleWidthField = value;
                    this.RaisePropertyChanged("StyleWidth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TitleMultimediaSource {
            get {
                return this.TitleMultimediaSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleMultimediaSourceField, value) != true)) {
                    this.TitleMultimediaSourceField = value;
                    this.RaisePropertyChanged("TitleMultimediaSource");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlaylistObject", Namespace="http://schemas.datacontract.org/2004/07/LiveMultimediaData")]
    [System.SerializableAttribute()]
    public partial class PlaylistObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdPlaylistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlaylistField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long IdPlaylist {
            get {
                return this.IdPlaylistField;
            }
            set {
                if ((this.IdPlaylistField.Equals(value) != true)) {
                    this.IdPlaylistField = value;
                    this.RaisePropertyChanged("IdPlaylist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Playlist {
            get {
                return this.PlaylistField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaylistField, value) != true)) {
                    this.PlaylistField = value;
                    this.RaisePropertyChanged("Playlist");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="enumTypeLog", Namespace="http://schemas.datacontract.org/2004/07/LiveMultimediaData")]
    public enum enumTypeLog : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Information = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="LiveMultimediaService", ConfigurationName="LiveMultimediaService.ILiveMultimediaService")]
    public interface ILiveMultimediaService {
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalLogin", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalLoginResponse")]
        string LocalLogin(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalLogin", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalLoginResponse")]
        System.Threading.Tasks.Task<string> LocalLoginAsync(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalLogout", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalLogoutResponse")]
        bool LocalLogout(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalLogout", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalLogoutResponse")]
        System.Threading.Tasks.Task<bool> LocalLogoutAsync(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalGetListMultimediaFiles", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalGetListMultimediaFilesResponse")]
        WebAndLoadTestService.LiveMultimediaService.MultimediaFile[] LocalGetListMultimediaFiles(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalGetListMultimediaFiles", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalGetListMultimediaFilesResponse")]
        System.Threading.Tasks.Task<WebAndLoadTestService.LiveMultimediaService.MultimediaFile[]> LocalGetListMultimediaFilesAsync(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetListMultimediaFiles", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetListMultimediaFilesResponse" +
            "")]
        WebAndLoadTestService.LiveMultimediaService.MultimediaFile[] RemoteGetListMultimediaFiles(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetListMultimediaFiles", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetListMultimediaFilesResponse" +
            "")]
        System.Threading.Tasks.Task<WebAndLoadTestService.LiveMultimediaService.MultimediaFile[]> RemoteGetListMultimediaFilesAsync(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalAddListMultimediaFiles", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalAddListMultimediaFilesResponse")]
        string[] LocalAddListMultimediaFiles(string UserToken, string[] ListMultimediaFiles);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalAddListMultimediaFiles", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalAddListMultimediaFilesResponse")]
        System.Threading.Tasks.Task<string[]> LocalAddListMultimediaFilesAsync(string UserToken, string[] ListMultimediaFiles);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalRemoveListMultimediaFiles", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalRemoveListMultimediaFilesRespon" +
            "se")]
        string LocalRemoveListMultimediaFiles(string UserToken, string[] ListMultimediaFiles);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalRemoveListMultimediaFiles", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalRemoveListMultimediaFilesRespon" +
            "se")]
        System.Threading.Tasks.Task<string> LocalRemoveListMultimediaFilesAsync(string UserToken, string[] ListMultimediaFiles);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteLogin", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteLoginResponse")]
        string RemoteLogin(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteLogin", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteLoginResponse")]
        System.Threading.Tasks.Task<string> RemoteLoginAsync(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteLogout", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteLogoutResponse")]
        bool RemoteLogout(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteLogout", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteLogoutResponse")]
        System.Threading.Tasks.Task<bool> RemoteLogoutAsync(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteRegisterNewUser", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteRegisterNewUserResponse")]
        string RemoteRegisterNewUser(string FirstName, string LastName, string Username, string Password, int IdTariffPlan, int IdLanguage);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteRegisterNewUser", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteRegisterNewUserResponse")]
        System.Threading.Tasks.Task<string> RemoteRegisterNewUserAsync(string FirstName, string LastName, string Username, string Password, int IdTariffPlan, int IdLanguage);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetContentMultimediaSource", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetContentMultimediaSourceResp" +
            "onse")]
        WebAndLoadTestService.LiveMultimediaService.OAuthObjectFolder[] RemoteGetContentMultimediaSource(string UserToken, int IdTypeMultimediaSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetContentMultimediaSource", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetContentMultimediaSourceResp" +
            "onse")]
        System.Threading.Tasks.Task<WebAndLoadTestService.LiveMultimediaService.OAuthObjectFolder[]> RemoteGetContentMultimediaSourceAsync(string UserToken, int IdTypeMultimediaSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetListMultimediaSource", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetListMultimediaSourceResponse")]
        WebAndLoadTestService.LiveMultimediaService.MultimediaSource[] GetListMultimediaSource(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetListMultimediaSource", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetListMultimediaSourceResponse")]
        System.Threading.Tasks.Task<WebAndLoadTestService.LiveMultimediaService.MultimediaSource[]> GetListMultimediaSourceAsync(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetListMultimediaByIdAlbum", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetListMultimediaByIdAlbumResp" +
            "onse")]
        WebAndLoadTestService.LiveMultimediaService.OAuthObjectAudio[] RemoteGetListMultimediaByIdAlbum(string UserToken, int IdTypeMultimediaSource, string[] ListIdAlbum);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetListMultimediaByIdAlbum", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetListMultimediaByIdAlbumResp" +
            "onse")]
        System.Threading.Tasks.Task<WebAndLoadTestService.LiveMultimediaService.OAuthObjectAudio[]> RemoteGetListMultimediaByIdAlbumAsync(string UserToken, int IdTypeMultimediaSource, string[] ListIdAlbum);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalGetSettings", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalGetSettingsResponse")]
        long[] LocalGetSettings(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalGetSettings", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalGetSettingsResponse")]
        System.Threading.Tasks.Task<long[]> LocalGetSettingsAsync(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetSettings", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetSettingsResponse")]
        long[] RemoteGetSettings(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetSettings", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetSettingsResponse")]
        System.Threading.Tasks.Task<long[]> RemoteGetSettingsAsync(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalGetMultimediaFileGUID", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalGetMultimediaFileGUIDResponse")]
        string[] LocalGetMultimediaFileGUID(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalGetMultimediaFileGUID", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalGetMultimediaFileGUIDResponse")]
        System.Threading.Tasks.Task<string[]> LocalGetMultimediaFileGUIDAsync(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalSetMultimediaFileBuffer", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalSetMultimediaFileBufferResponse" +
            "")]
        void LocalSetMultimediaFileBuffer(string UserToken, string MultimediaFileGUID, byte[] MultimediaFileBuffer, long MultimediaFileLength, bool IsStopTransfer, string MultimediaFileMemoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalSetMultimediaFileBuffer", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalSetMultimediaFileBufferResponse" +
            "")]
        System.Threading.Tasks.Task LocalSetMultimediaFileBufferAsync(string UserToken, string MultimediaFileGUID, byte[] MultimediaFileBuffer, long MultimediaFileLength, bool IsStopTransfer, string MultimediaFileMemoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteInitMultimediaFile", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteInitMultimediaFileResponse")]
        bool RemoteInitMultimediaFile(string UserToken, string KeyGuid, string MultimediaFileGUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteInitMultimediaFile", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteInitMultimediaFileResponse")]
        System.Threading.Tasks.Task<bool> RemoteInitMultimediaFileAsync(string UserToken, string KeyGuid, string MultimediaFileGUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetMultimediaFileBuffer", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetMultimediaFileBufferRespons" +
            "e")]
        byte[] RemoteGetMultimediaFileBuffer(string UserToken, string KeyGuid, string MultimediaFileGUID, int MultimediaFileChunkCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetMultimediaFileBuffer", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetMultimediaFileBufferRespons" +
            "e")]
        System.Threading.Tasks.Task<byte[]> RemoteGetMultimediaFileBufferAsync(string UserToken, string KeyGuid, string MultimediaFileGUID, int MultimediaFileChunkCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetMultimediaFileBufferSkyDriv" +
            "e", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetMultimediaFileBufferSkyDriv" +
            "eResponse")]
        WebAndLoadTestService.LiveMultimediaService.RemoteGetMultimediaFileBufferSkyDriveResponse RemoteGetMultimediaFileBufferSkyDrive(WebAndLoadTestService.LiveMultimediaService.RemoteGetMultimediaFileBufferSkyDriveRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetMultimediaFileBufferSkyDriv" +
            "e", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetMultimediaFileBufferSkyDriv" +
            "eResponse")]
        System.Threading.Tasks.Task<WebAndLoadTestService.LiveMultimediaService.RemoteGetMultimediaFileBufferSkyDriveResponse> RemoteGetMultimediaFileBufferSkyDriveAsync(WebAndLoadTestService.LiveMultimediaService.RemoteGetMultimediaFileBufferSkyDriveRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteOAuthSetAccessToken", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteOAuthSetAccessTokenResponse")]
        bool RemoteOAuthSetAccessToken(string UserToken, int IdTypeMultimediaSource, WebAndLoadTestService.LiveMultimediaService.OAuthToken OAuthUserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteOAuthSetAccessToken", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteOAuthSetAccessTokenResponse")]
        System.Threading.Tasks.Task<bool> RemoteOAuthSetAccessTokenAsync(string UserToken, int IdTypeMultimediaSource, WebAndLoadTestService.LiveMultimediaService.OAuthToken OAuthUserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteOAuthGetAccessToken", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteOAuthGetAccessTokenResponse")]
        WebAndLoadTestService.LiveMultimediaService.RemoteOAuthGetAccessTokenResponse RemoteOAuthGetAccessToken(WebAndLoadTestService.LiveMultimediaService.RemoteOAuthGetAccessTokenRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteOAuthGetAccessToken", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteOAuthGetAccessTokenResponse")]
        System.Threading.Tasks.Task<WebAndLoadTestService.LiveMultimediaService.RemoteOAuthGetAccessTokenResponse> RemoteOAuthGetAccessTokenAsync(WebAndLoadTestService.LiveMultimediaService.RemoteOAuthGetAccessTokenRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteOAuthRefreshAccessToken", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteOAuthRefreshAccessTokenRespons" +
            "e")]
        bool RemoteOAuthRefreshAccessToken(string UserToken, int IdTypeMultimediaSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteOAuthRefreshAccessToken", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteOAuthRefreshAccessTokenRespons" +
            "e")]
        System.Threading.Tasks.Task<bool> RemoteOAuthRefreshAccessTokenAsync(string UserToken, int IdTypeMultimediaSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistSave", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistSaveResponse")]
        string RemotePlaylistSave(string UserToken, string Playlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistSave", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistSaveResponse")]
        System.Threading.Tasks.Task<string> RemotePlaylistSaveAsync(string UserToken, string Playlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistLoad", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistLoadResponse")]
        WebAndLoadTestService.LiveMultimediaService.PlaylistObject[] RemotePlaylistLoad(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistLoad", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistLoadResponse")]
        System.Threading.Tasks.Task<WebAndLoadTestService.LiveMultimediaService.PlaylistObject[]> RemotePlaylistLoadAsync(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistDelete", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistDeleteResponse")]
        bool RemotePlaylistDelete(string UserToken, long IdPlaylist);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistDelete", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistDeleteResponse")]
        System.Threading.Tasks.Task<bool> RemotePlaylistDeleteAsync(string UserToken, long IdPlaylist);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistItemSave", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistItemSaveResponse")]
        bool RemotePlaylistItemSave(string UserToken, long IdPlaylist, int IdTypeMultimediaSource, string IdMultimediaItem, string MultimediaItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistItemSave", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistItemSaveResponse")]
        System.Threading.Tasks.Task<bool> RemotePlaylistItemSaveAsync(string UserToken, long IdPlaylist, int IdTypeMultimediaSource, string IdMultimediaItem, string MultimediaItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistItemRemove", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistItemRemoveResponse")]
        bool RemotePlaylistItemRemove(string UserToken, long IdPlaylistItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistItemRemove", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistItemRemoveResponse")]
        System.Threading.Tasks.Task<bool> RemotePlaylistItemRemoveAsync(string UserToken, long IdPlaylistItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalWriteLog", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalWriteLogResponse")]
        void LocalWriteLog(string UserToken, string Site, string Procedure, WebAndLoadTestService.LiveMultimediaService.enumTypeLog IdTypeLog, string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalWriteLog", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalWriteLogResponse")]
        System.Threading.Tasks.Task LocalWriteLogAsync(string UserToken, string Site, string Procedure, WebAndLoadTestService.LiveMultimediaService.enumTypeLog IdTypeLog, string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteWriteLog", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteWriteLogResponse")]
        void RemoteWriteLog(string UserToken, string Site, string Procedure, WebAndLoadTestService.LiveMultimediaService.enumTypeLog IdTypeLog, string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteWriteLog", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteWriteLogResponse")]
        System.Threading.Tasks.Task RemoteWriteLogAsync(string UserToken, string Site, string Procedure, WebAndLoadTestService.LiveMultimediaService.enumTypeLog IdTypeLog, string Message);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteGetMultimediaFileBufferSkyDrive", WrapperNamespace="LiveMultimediaService", IsWrapped=true)]
    public partial class RemoteGetMultimediaFileBufferSkyDriveRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=0)]
        public string UserToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=1)]
        public string MultimediaFileGUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=2)]
        public byte[] MultimediaFileBuffer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=3)]
        public long MultimediaFileLength;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=4)]
        public int MultimediaFileChunkCount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=5)]
        public bool IsStopTransfer;
        
        public RemoteGetMultimediaFileBufferSkyDriveRequest() {
        }
        
        public RemoteGetMultimediaFileBufferSkyDriveRequest(string UserToken, string MultimediaFileGUID, byte[] MultimediaFileBuffer, long MultimediaFileLength, int MultimediaFileChunkCount, bool IsStopTransfer) {
            this.UserToken = UserToken;
            this.MultimediaFileGUID = MultimediaFileGUID;
            this.MultimediaFileBuffer = MultimediaFileBuffer;
            this.MultimediaFileLength = MultimediaFileLength;
            this.MultimediaFileChunkCount = MultimediaFileChunkCount;
            this.IsStopTransfer = IsStopTransfer;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteGetMultimediaFileBufferSkyDriveResponse", WrapperNamespace="LiveMultimediaService", IsWrapped=true)]
    public partial class RemoteGetMultimediaFileBufferSkyDriveResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=0)]
        public byte[] MultimediaFileBuffer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=1)]
        public long MultimediaFileLength;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=2)]
        public bool IsStopTransfer;
        
        public RemoteGetMultimediaFileBufferSkyDriveResponse() {
        }
        
        public RemoteGetMultimediaFileBufferSkyDriveResponse(byte[] MultimediaFileBuffer, long MultimediaFileLength, bool IsStopTransfer) {
            this.MultimediaFileBuffer = MultimediaFileBuffer;
            this.MultimediaFileLength = MultimediaFileLength;
            this.IsStopTransfer = IsStopTransfer;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteOAuthGetAccessToken", WrapperNamespace="LiveMultimediaService", IsWrapped=true)]
    public partial class RemoteOAuthGetAccessTokenRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=0)]
        public string UserToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=1)]
        public int IdTypeMultimediaSource;
        
        public RemoteOAuthGetAccessTokenRequest() {
        }
        
        public RemoteOAuthGetAccessTokenRequest(string UserToken, int IdTypeMultimediaSource) {
            this.UserToken = UserToken;
            this.IdTypeMultimediaSource = IdTypeMultimediaSource;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteOAuthGetAccessTokenResponse", WrapperNamespace="LiveMultimediaService", IsWrapped=true)]
    public partial class RemoteOAuthGetAccessTokenResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=0)]
        public bool RemoteOAuthGetAccessTokenResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=1)]
        public string AccessToken;
        
        public RemoteOAuthGetAccessTokenResponse() {
        }
        
        public RemoteOAuthGetAccessTokenResponse(bool RemoteOAuthGetAccessTokenResult, string AccessToken) {
            this.RemoteOAuthGetAccessTokenResult = RemoteOAuthGetAccessTokenResult;
            this.AccessToken = AccessToken;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILiveMultimediaServiceChannel : WebAndLoadTestService.LiveMultimediaService.ILiveMultimediaService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LiveMultimediaServiceClient : System.ServiceModel.ClientBase<WebAndLoadTestService.LiveMultimediaService.ILiveMultimediaService>, WebAndLoadTestService.LiveMultimediaService.ILiveMultimediaService {
        
        public LiveMultimediaServiceClient() {
        }
        
        public LiveMultimediaServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LiveMultimediaServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LiveMultimediaServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LiveMultimediaServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string LocalLogin(string Username, string Password) {
            return base.Channel.LocalLogin(Username, Password);
        }
        
        public System.Threading.Tasks.Task<string> LocalLoginAsync(string Username, string Password) {
            return base.Channel.LocalLoginAsync(Username, Password);
        }
        
        public bool LocalLogout(string UserToken) {
            return base.Channel.LocalLogout(UserToken);
        }
        
        public System.Threading.Tasks.Task<bool> LocalLogoutAsync(string UserToken) {
            return base.Channel.LocalLogoutAsync(UserToken);
        }
        
        public WebAndLoadTestService.LiveMultimediaService.MultimediaFile[] LocalGetListMultimediaFiles(string UserToken) {
            return base.Channel.LocalGetListMultimediaFiles(UserToken);
        }
        
        public System.Threading.Tasks.Task<WebAndLoadTestService.LiveMultimediaService.MultimediaFile[]> LocalGetListMultimediaFilesAsync(string UserToken) {
            return base.Channel.LocalGetListMultimediaFilesAsync(UserToken);
        }
        
        public WebAndLoadTestService.LiveMultimediaService.MultimediaFile[] RemoteGetListMultimediaFiles(string UserToken) {
            return base.Channel.RemoteGetListMultimediaFiles(UserToken);
        }
        
        public System.Threading.Tasks.Task<WebAndLoadTestService.LiveMultimediaService.MultimediaFile[]> RemoteGetListMultimediaFilesAsync(string UserToken) {
            return base.Channel.RemoteGetListMultimediaFilesAsync(UserToken);
        }
        
        public string[] LocalAddListMultimediaFiles(string UserToken, string[] ListMultimediaFiles) {
            return base.Channel.LocalAddListMultimediaFiles(UserToken, ListMultimediaFiles);
        }
        
        public System.Threading.Tasks.Task<string[]> LocalAddListMultimediaFilesAsync(string UserToken, string[] ListMultimediaFiles) {
            return base.Channel.LocalAddListMultimediaFilesAsync(UserToken, ListMultimediaFiles);
        }
        
        public string LocalRemoveListMultimediaFiles(string UserToken, string[] ListMultimediaFiles) {
            return base.Channel.LocalRemoveListMultimediaFiles(UserToken, ListMultimediaFiles);
        }
        
        public System.Threading.Tasks.Task<string> LocalRemoveListMultimediaFilesAsync(string UserToken, string[] ListMultimediaFiles) {
            return base.Channel.LocalRemoveListMultimediaFilesAsync(UserToken, ListMultimediaFiles);
        }
        
        public string RemoteLogin(string Username, string Password) {
            return base.Channel.RemoteLogin(Username, Password);
        }
        
        public System.Threading.Tasks.Task<string> RemoteLoginAsync(string Username, string Password) {
            return base.Channel.RemoteLoginAsync(Username, Password);
        }
        
        public bool RemoteLogout(string UserToken) {
            return base.Channel.RemoteLogout(UserToken);
        }
        
        public System.Threading.Tasks.Task<bool> RemoteLogoutAsync(string UserToken) {
            return base.Channel.RemoteLogoutAsync(UserToken);
        }
        
        public string RemoteRegisterNewUser(string FirstName, string LastName, string Username, string Password, int IdTariffPlan, int IdLanguage) {
            return base.Channel.RemoteRegisterNewUser(FirstName, LastName, Username, Password, IdTariffPlan, IdLanguage);
        }
        
        public System.Threading.Tasks.Task<string> RemoteRegisterNewUserAsync(string FirstName, string LastName, string Username, string Password, int IdTariffPlan, int IdLanguage) {
            return base.Channel.RemoteRegisterNewUserAsync(FirstName, LastName, Username, Password, IdTariffPlan, IdLanguage);
        }
        
        public WebAndLoadTestService.LiveMultimediaService.OAuthObjectFolder[] RemoteGetContentMultimediaSource(string UserToken, int IdTypeMultimediaSource) {
            return base.Channel.RemoteGetContentMultimediaSource(UserToken, IdTypeMultimediaSource);
        }
        
        public System.Threading.Tasks.Task<WebAndLoadTestService.LiveMultimediaService.OAuthObjectFolder[]> RemoteGetContentMultimediaSourceAsync(string UserToken, int IdTypeMultimediaSource) {
            return base.Channel.RemoteGetContentMultimediaSourceAsync(UserToken, IdTypeMultimediaSource);
        }
        
        public WebAndLoadTestService.LiveMultimediaService.MultimediaSource[] GetListMultimediaSource(string UserToken) {
            return base.Channel.GetListMultimediaSource(UserToken);
        }
        
        public System.Threading.Tasks.Task<WebAndLoadTestService.LiveMultimediaService.MultimediaSource[]> GetListMultimediaSourceAsync(string UserToken) {
            return base.Channel.GetListMultimediaSourceAsync(UserToken);
        }
        
        public WebAndLoadTestService.LiveMultimediaService.OAuthObjectAudio[] RemoteGetListMultimediaByIdAlbum(string UserToken, int IdTypeMultimediaSource, string[] ListIdAlbum) {
            return base.Channel.RemoteGetListMultimediaByIdAlbum(UserToken, IdTypeMultimediaSource, ListIdAlbum);
        }
        
        public System.Threading.Tasks.Task<WebAndLoadTestService.LiveMultimediaService.OAuthObjectAudio[]> RemoteGetListMultimediaByIdAlbumAsync(string UserToken, int IdTypeMultimediaSource, string[] ListIdAlbum) {
            return base.Channel.RemoteGetListMultimediaByIdAlbumAsync(UserToken, IdTypeMultimediaSource, ListIdAlbum);
        }
        
        public long[] LocalGetSettings(string UserToken) {
            return base.Channel.LocalGetSettings(UserToken);
        }
        
        public System.Threading.Tasks.Task<long[]> LocalGetSettingsAsync(string UserToken) {
            return base.Channel.LocalGetSettingsAsync(UserToken);
        }
        
        public long[] RemoteGetSettings(string UserToken) {
            return base.Channel.RemoteGetSettings(UserToken);
        }
        
        public System.Threading.Tasks.Task<long[]> RemoteGetSettingsAsync(string UserToken) {
            return base.Channel.RemoteGetSettingsAsync(UserToken);
        }
        
        public string[] LocalGetMultimediaFileGUID(string UserToken) {
            return base.Channel.LocalGetMultimediaFileGUID(UserToken);
        }
        
        public System.Threading.Tasks.Task<string[]> LocalGetMultimediaFileGUIDAsync(string UserToken) {
            return base.Channel.LocalGetMultimediaFileGUIDAsync(UserToken);
        }
        
        public void LocalSetMultimediaFileBuffer(string UserToken, string MultimediaFileGUID, byte[] MultimediaFileBuffer, long MultimediaFileLength, bool IsStopTransfer, string MultimediaFileMemoryName) {
            base.Channel.LocalSetMultimediaFileBuffer(UserToken, MultimediaFileGUID, MultimediaFileBuffer, MultimediaFileLength, IsStopTransfer, MultimediaFileMemoryName);
        }
        
        public System.Threading.Tasks.Task LocalSetMultimediaFileBufferAsync(string UserToken, string MultimediaFileGUID, byte[] MultimediaFileBuffer, long MultimediaFileLength, bool IsStopTransfer, string MultimediaFileMemoryName) {
            return base.Channel.LocalSetMultimediaFileBufferAsync(UserToken, MultimediaFileGUID, MultimediaFileBuffer, MultimediaFileLength, IsStopTransfer, MultimediaFileMemoryName);
        }
        
        public bool RemoteInitMultimediaFile(string UserToken, string KeyGuid, string MultimediaFileGUID) {
            return base.Channel.RemoteInitMultimediaFile(UserToken, KeyGuid, MultimediaFileGUID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoteInitMultimediaFileAsync(string UserToken, string KeyGuid, string MultimediaFileGUID) {
            return base.Channel.RemoteInitMultimediaFileAsync(UserToken, KeyGuid, MultimediaFileGUID);
        }
        
        public byte[] RemoteGetMultimediaFileBuffer(string UserToken, string KeyGuid, string MultimediaFileGUID, int MultimediaFileChunkCount) {
            return base.Channel.RemoteGetMultimediaFileBuffer(UserToken, KeyGuid, MultimediaFileGUID, MultimediaFileChunkCount);
        }
        
        public System.Threading.Tasks.Task<byte[]> RemoteGetMultimediaFileBufferAsync(string UserToken, string KeyGuid, string MultimediaFileGUID, int MultimediaFileChunkCount) {
            return base.Channel.RemoteGetMultimediaFileBufferAsync(UserToken, KeyGuid, MultimediaFileGUID, MultimediaFileChunkCount);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebAndLoadTestService.LiveMultimediaService.RemoteGetMultimediaFileBufferSkyDriveResponse WebAndLoadTestService.LiveMultimediaService.ILiveMultimediaService.RemoteGetMultimediaFileBufferSkyDrive(WebAndLoadTestService.LiveMultimediaService.RemoteGetMultimediaFileBufferSkyDriveRequest request) {
            return base.Channel.RemoteGetMultimediaFileBufferSkyDrive(request);
        }
        
        public void RemoteGetMultimediaFileBufferSkyDrive(string UserToken, string MultimediaFileGUID, ref byte[] MultimediaFileBuffer, ref long MultimediaFileLength, int MultimediaFileChunkCount, ref bool IsStopTransfer) {
            WebAndLoadTestService.LiveMultimediaService.RemoteGetMultimediaFileBufferSkyDriveRequest inValue = new WebAndLoadTestService.LiveMultimediaService.RemoteGetMultimediaFileBufferSkyDriveRequest();
            inValue.UserToken = UserToken;
            inValue.MultimediaFileGUID = MultimediaFileGUID;
            inValue.MultimediaFileBuffer = MultimediaFileBuffer;
            inValue.MultimediaFileLength = MultimediaFileLength;
            inValue.MultimediaFileChunkCount = MultimediaFileChunkCount;
            inValue.IsStopTransfer = IsStopTransfer;
            WebAndLoadTestService.LiveMultimediaService.RemoteGetMultimediaFileBufferSkyDriveResponse retVal = ((WebAndLoadTestService.LiveMultimediaService.ILiveMultimediaService)(this)).RemoteGetMultimediaFileBufferSkyDrive(inValue);
            MultimediaFileBuffer = retVal.MultimediaFileBuffer;
            MultimediaFileLength = retVal.MultimediaFileLength;
            IsStopTransfer = retVal.IsStopTransfer;
        }
        
        public System.Threading.Tasks.Task<WebAndLoadTestService.LiveMultimediaService.RemoteGetMultimediaFileBufferSkyDriveResponse> RemoteGetMultimediaFileBufferSkyDriveAsync(WebAndLoadTestService.LiveMultimediaService.RemoteGetMultimediaFileBufferSkyDriveRequest request) {
            return base.Channel.RemoteGetMultimediaFileBufferSkyDriveAsync(request);
        }
        
        public bool RemoteOAuthSetAccessToken(string UserToken, int IdTypeMultimediaSource, WebAndLoadTestService.LiveMultimediaService.OAuthToken OAuthUserToken) {
            return base.Channel.RemoteOAuthSetAccessToken(UserToken, IdTypeMultimediaSource, OAuthUserToken);
        }
        
        public System.Threading.Tasks.Task<bool> RemoteOAuthSetAccessTokenAsync(string UserToken, int IdTypeMultimediaSource, WebAndLoadTestService.LiveMultimediaService.OAuthToken OAuthUserToken) {
            return base.Channel.RemoteOAuthSetAccessTokenAsync(UserToken, IdTypeMultimediaSource, OAuthUserToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebAndLoadTestService.LiveMultimediaService.RemoteOAuthGetAccessTokenResponse WebAndLoadTestService.LiveMultimediaService.ILiveMultimediaService.RemoteOAuthGetAccessToken(WebAndLoadTestService.LiveMultimediaService.RemoteOAuthGetAccessTokenRequest request) {
            return base.Channel.RemoteOAuthGetAccessToken(request);
        }
        
        public bool RemoteOAuthGetAccessToken(string UserToken, int IdTypeMultimediaSource, out string AccessToken) {
            WebAndLoadTestService.LiveMultimediaService.RemoteOAuthGetAccessTokenRequest inValue = new WebAndLoadTestService.LiveMultimediaService.RemoteOAuthGetAccessTokenRequest();
            inValue.UserToken = UserToken;
            inValue.IdTypeMultimediaSource = IdTypeMultimediaSource;
            WebAndLoadTestService.LiveMultimediaService.RemoteOAuthGetAccessTokenResponse retVal = ((WebAndLoadTestService.LiveMultimediaService.ILiveMultimediaService)(this)).RemoteOAuthGetAccessToken(inValue);
            AccessToken = retVal.AccessToken;
            return retVal.RemoteOAuthGetAccessTokenResult;
        }
        
        public System.Threading.Tasks.Task<WebAndLoadTestService.LiveMultimediaService.RemoteOAuthGetAccessTokenResponse> RemoteOAuthGetAccessTokenAsync(WebAndLoadTestService.LiveMultimediaService.RemoteOAuthGetAccessTokenRequest request) {
            return base.Channel.RemoteOAuthGetAccessTokenAsync(request);
        }
        
        public bool RemoteOAuthRefreshAccessToken(string UserToken, int IdTypeMultimediaSource) {
            return base.Channel.RemoteOAuthRefreshAccessToken(UserToken, IdTypeMultimediaSource);
        }
        
        public System.Threading.Tasks.Task<bool> RemoteOAuthRefreshAccessTokenAsync(string UserToken, int IdTypeMultimediaSource) {
            return base.Channel.RemoteOAuthRefreshAccessTokenAsync(UserToken, IdTypeMultimediaSource);
        }
        
        public string RemotePlaylistSave(string UserToken, string Playlist) {
            return base.Channel.RemotePlaylistSave(UserToken, Playlist);
        }
        
        public System.Threading.Tasks.Task<string> RemotePlaylistSaveAsync(string UserToken, string Playlist) {
            return base.Channel.RemotePlaylistSaveAsync(UserToken, Playlist);
        }
        
        public WebAndLoadTestService.LiveMultimediaService.PlaylistObject[] RemotePlaylistLoad(string UserToken) {
            return base.Channel.RemotePlaylistLoad(UserToken);
        }
        
        public System.Threading.Tasks.Task<WebAndLoadTestService.LiveMultimediaService.PlaylistObject[]> RemotePlaylistLoadAsync(string UserToken) {
            return base.Channel.RemotePlaylistLoadAsync(UserToken);
        }
        
        public bool RemotePlaylistDelete(string UserToken, long IdPlaylist) {
            return base.Channel.RemotePlaylistDelete(UserToken, IdPlaylist);
        }
        
        public System.Threading.Tasks.Task<bool> RemotePlaylistDeleteAsync(string UserToken, long IdPlaylist) {
            return base.Channel.RemotePlaylistDeleteAsync(UserToken, IdPlaylist);
        }
        
        public bool RemotePlaylistItemSave(string UserToken, long IdPlaylist, int IdTypeMultimediaSource, string IdMultimediaItem, string MultimediaItem) {
            return base.Channel.RemotePlaylistItemSave(UserToken, IdPlaylist, IdTypeMultimediaSource, IdMultimediaItem, MultimediaItem);
        }
        
        public System.Threading.Tasks.Task<bool> RemotePlaylistItemSaveAsync(string UserToken, long IdPlaylist, int IdTypeMultimediaSource, string IdMultimediaItem, string MultimediaItem) {
            return base.Channel.RemotePlaylistItemSaveAsync(UserToken, IdPlaylist, IdTypeMultimediaSource, IdMultimediaItem, MultimediaItem);
        }
        
        public bool RemotePlaylistItemRemove(string UserToken, long IdPlaylistItem) {
            return base.Channel.RemotePlaylistItemRemove(UserToken, IdPlaylistItem);
        }
        
        public System.Threading.Tasks.Task<bool> RemotePlaylistItemRemoveAsync(string UserToken, long IdPlaylistItem) {
            return base.Channel.RemotePlaylistItemRemoveAsync(UserToken, IdPlaylistItem);
        }
        
        public void LocalWriteLog(string UserToken, string Site, string Procedure, WebAndLoadTestService.LiveMultimediaService.enumTypeLog IdTypeLog, string Message) {
            base.Channel.LocalWriteLog(UserToken, Site, Procedure, IdTypeLog, Message);
        }
        
        public System.Threading.Tasks.Task LocalWriteLogAsync(string UserToken, string Site, string Procedure, WebAndLoadTestService.LiveMultimediaService.enumTypeLog IdTypeLog, string Message) {
            return base.Channel.LocalWriteLogAsync(UserToken, Site, Procedure, IdTypeLog, Message);
        }
        
        public void RemoteWriteLog(string UserToken, string Site, string Procedure, WebAndLoadTestService.LiveMultimediaService.enumTypeLog IdTypeLog, string Message) {
            base.Channel.RemoteWriteLog(UserToken, Site, Procedure, IdTypeLog, Message);
        }
        
        public System.Threading.Tasks.Task RemoteWriteLogAsync(string UserToken, string Site, string Procedure, WebAndLoadTestService.LiveMultimediaService.enumTypeLog IdTypeLog, string Message) {
            return base.Channel.RemoteWriteLogAsync(UserToken, Site, Procedure, IdTypeLog, Message);
        }
    }
}
