//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiveMultimediaSite.LiveMultimediaService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultimediaFile", Namespace="http://schemas.datacontract.org/2004/07/LiveMultimediaData")]
    [System.SerializableAttribute()]
    public partial class MultimediaFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlbumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeywordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MultimediaFileGUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeMultimediaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isSelectMultimediaFileField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Album {
            get {
                return this.AlbumField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumField, value) != true)) {
                    this.AlbumField = value;
                    this.RaisePropertyChanged("Album");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comments {
            get {
                return this.CommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsField, value) != true)) {
                    this.CommentsField = value;
                    this.RaisePropertyChanged("Comments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullPath {
            get {
                return this.FullPathField;
            }
            set {
                if ((object.ReferenceEquals(this.FullPathField, value) != true)) {
                    this.FullPathField = value;
                    this.RaisePropertyChanged("FullPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Keywords {
            get {
                return this.KeywordsField;
            }
            set {
                if ((object.ReferenceEquals(this.KeywordsField, value) != true)) {
                    this.KeywordsField = value;
                    this.RaisePropertyChanged("Keywords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MultimediaFileGUID {
            get {
                return this.MultimediaFileGUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MultimediaFileGUIDField, value) != true)) {
                    this.MultimediaFileGUIDField = value;
                    this.RaisePropertyChanged("MultimediaFileGUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Source {
            get {
                return this.SourceField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceField, value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeMultimedia {
            get {
                return this.TypeMultimediaField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeMultimediaField, value) != true)) {
                    this.TypeMultimediaField = value;
                    this.RaisePropertyChanged("TypeMultimedia");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isSelectMultimediaFile {
            get {
                return this.isSelectMultimediaFileField;
            }
            set {
                if ((this.isSelectMultimediaFileField.Equals(value) != true)) {
                    this.isSelectMultimediaFileField = value;
                    this.RaisePropertyChanged("isSelectMultimediaFile");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultimediaSource", Namespace="http://schemas.datacontract.org/2004/07/LiveMultimediaData")]
    [System.SerializableAttribute()]
    public partial class MultimediaSource : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdParentTypeMultimediaSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdPublisherField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdTypeMultimediaSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageUrlLargeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageUrlMediumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageUrlSmallField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAvailableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsHasChildField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTranslateTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameMultimediaSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderSortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleBackColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleBorderColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StyleFontSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleForeColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StyleHeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StyleWidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleMultimediaSourceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdParentTypeMultimediaSource {
            get {
                return this.IdParentTypeMultimediaSourceField;
            }
            set {
                if ((this.IdParentTypeMultimediaSourceField.Equals(value) != true)) {
                    this.IdParentTypeMultimediaSourceField = value;
                    this.RaisePropertyChanged("IdParentTypeMultimediaSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdPublisher {
            get {
                return this.IdPublisherField;
            }
            set {
                if ((this.IdPublisherField.Equals(value) != true)) {
                    this.IdPublisherField = value;
                    this.RaisePropertyChanged("IdPublisher");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdTypeMultimediaSource {
            get {
                return this.IdTypeMultimediaSourceField;
            }
            set {
                if ((this.IdTypeMultimediaSourceField.Equals(value) != true)) {
                    this.IdTypeMultimediaSourceField = value;
                    this.RaisePropertyChanged("IdTypeMultimediaSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageUrlLarge {
            get {
                return this.ImageUrlLargeField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageUrlLargeField, value) != true)) {
                    this.ImageUrlLargeField = value;
                    this.RaisePropertyChanged("ImageUrlLarge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageUrlMedium {
            get {
                return this.ImageUrlMediumField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageUrlMediumField, value) != true)) {
                    this.ImageUrlMediumField = value;
                    this.RaisePropertyChanged("ImageUrlMedium");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageUrlSmall {
            get {
                return this.ImageUrlSmallField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageUrlSmallField, value) != true)) {
                    this.ImageUrlSmallField = value;
                    this.RaisePropertyChanged("ImageUrlSmall");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAvailable {
            get {
                return this.IsAvailableField;
            }
            set {
                if ((this.IsAvailableField.Equals(value) != true)) {
                    this.IsAvailableField = value;
                    this.RaisePropertyChanged("IsAvailable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled {
            get {
                return this.IsEnabledField;
            }
            set {
                if ((this.IsEnabledField.Equals(value) != true)) {
                    this.IsEnabledField = value;
                    this.RaisePropertyChanged("IsEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsHasChild {
            get {
                return this.IsHasChildField;
            }
            set {
                if ((this.IsHasChildField.Equals(value) != true)) {
                    this.IsHasChildField = value;
                    this.RaisePropertyChanged("IsHasChild");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTranslateTitle {
            get {
                return this.IsTranslateTitleField;
            }
            set {
                if ((this.IsTranslateTitleField.Equals(value) != true)) {
                    this.IsTranslateTitleField = value;
                    this.RaisePropertyChanged("IsTranslateTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameMultimediaSource {
            get {
                return this.NameMultimediaSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.NameMultimediaSourceField, value) != true)) {
                    this.NameMultimediaSourceField = value;
                    this.RaisePropertyChanged("NameMultimediaSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderSort {
            get {
                return this.OrderSortField;
            }
            set {
                if ((this.OrderSortField.Equals(value) != true)) {
                    this.OrderSortField = value;
                    this.RaisePropertyChanged("OrderSort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Style {
            get {
                return this.StyleField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleField, value) != true)) {
                    this.StyleField = value;
                    this.RaisePropertyChanged("Style");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StyleBackColor {
            get {
                return this.StyleBackColorField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleBackColorField, value) != true)) {
                    this.StyleBackColorField = value;
                    this.RaisePropertyChanged("StyleBackColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StyleBorderColor {
            get {
                return this.StyleBorderColorField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleBorderColorField, value) != true)) {
                    this.StyleBorderColorField = value;
                    this.RaisePropertyChanged("StyleBorderColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StyleFontSize {
            get {
                return this.StyleFontSizeField;
            }
            set {
                if ((this.StyleFontSizeField.Equals(value) != true)) {
                    this.StyleFontSizeField = value;
                    this.RaisePropertyChanged("StyleFontSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StyleForeColor {
            get {
                return this.StyleForeColorField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleForeColorField, value) != true)) {
                    this.StyleForeColorField = value;
                    this.RaisePropertyChanged("StyleForeColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StyleHeight {
            get {
                return this.StyleHeightField;
            }
            set {
                if ((this.StyleHeightField.Equals(value) != true)) {
                    this.StyleHeightField = value;
                    this.RaisePropertyChanged("StyleHeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StyleName {
            get {
                return this.StyleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleNameField, value) != true)) {
                    this.StyleNameField = value;
                    this.RaisePropertyChanged("StyleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StyleWidth {
            get {
                return this.StyleWidthField;
            }
            set {
                if ((this.StyleWidthField.Equals(value) != true)) {
                    this.StyleWidthField = value;
                    this.RaisePropertyChanged("StyleWidth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TitleMultimediaSource {
            get {
                return this.TitleMultimediaSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleMultimediaSourceField, value) != true)) {
                    this.TitleMultimediaSourceField = value;
                    this.RaisePropertyChanged("TitleMultimediaSource");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OAuthToken", Namespace="http://schemas.datacontract.org/2004/07/LiveMultimediaOAuth")]
    [System.SerializableAttribute()]
    public partial class OAuthToken : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string access_tokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string authentication_tokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string expires_inField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string refresh_tokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string scopeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string access_token {
            get {
                return this.access_tokenField;
            }
            set {
                if ((object.ReferenceEquals(this.access_tokenField, value) != true)) {
                    this.access_tokenField = value;
                    this.RaisePropertyChanged("access_token");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string authentication_token {
            get {
                return this.authentication_tokenField;
            }
            set {
                if ((object.ReferenceEquals(this.authentication_tokenField, value) != true)) {
                    this.authentication_tokenField = value;
                    this.RaisePropertyChanged("authentication_token");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string expires_in {
            get {
                return this.expires_inField;
            }
            set {
                if ((object.ReferenceEquals(this.expires_inField, value) != true)) {
                    this.expires_inField = value;
                    this.RaisePropertyChanged("expires_in");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string refresh_token {
            get {
                return this.refresh_tokenField;
            }
            set {
                if ((object.ReferenceEquals(this.refresh_tokenField, value) != true)) {
                    this.refresh_tokenField = value;
                    this.RaisePropertyChanged("refresh_token");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string scope {
            get {
                return this.scopeField;
            }
            set {
                if ((object.ReferenceEquals(this.scopeField, value) != true)) {
                    this.scopeField = value;
                    this.RaisePropertyChanged("scope");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlaylistObject", Namespace="http://schemas.datacontract.org/2004/07/LiveMultimediaData")]
    [System.SerializableAttribute()]
    public partial class PlaylistObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdPlaylistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlaylistField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long IdPlaylist {
            get {
                return this.IdPlaylistField;
            }
            set {
                if ((this.IdPlaylistField.Equals(value) != true)) {
                    this.IdPlaylistField = value;
                    this.RaisePropertyChanged("IdPlaylist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Playlist {
            get {
                return this.PlaylistField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaylistField, value) != true)) {
                    this.PlaylistField = value;
                    this.RaisePropertyChanged("Playlist");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LanguageInfo", Namespace="http://schemas.datacontract.org/2004/07/StorageInterfacesData")]
    [System.SerializableAttribute()]
    public partial class LanguageInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LanguageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NativeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Language {
            get {
                return this.LanguageField;
            }
            set {
                if ((object.ReferenceEquals(this.LanguageField, value) != true)) {
                    this.LanguageField = value;
                    this.RaisePropertyChanged("Language");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NativeName {
            get {
                return this.NativeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NativeNameField, value) != true)) {
                    this.NativeNameField = value;
                    this.RaisePropertyChanged("NativeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocalizationElement", Namespace="http://schemas.datacontract.org/2004/07/StorageInterfacesData")]
    [System.SerializableAttribute()]
    public partial class LocalizationElement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ElementNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ElementValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElementName {
            get {
                return this.ElementNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementNameField, value) != true)) {
                    this.ElementNameField = value;
                    this.RaisePropertyChanged("ElementName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElementValue {
            get {
                return this.ElementValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementValueField, value) != true)) {
                    this.ElementValueField = value;
                    this.RaisePropertyChanged("ElementValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultimediaItem", Namespace="http://schemas.datacontract.org/2004/07/LiveMultimediaData")]
    [System.SerializableAttribute()]
    public partial class MultimediaItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleBackColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleFontFamilyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StyleFontSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleForeColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StyleHeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StyleWidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeItemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlImageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdSource {
            get {
                return this.IdSourceField;
            }
            set {
                if ((this.IdSourceField.Equals(value) != true)) {
                    this.IdSourceField = value;
                    this.RaisePropertyChanged("IdSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled {
            get {
                return this.IsEnabledField;
            }
            set {
                if ((this.IsEnabledField.Equals(value) != true)) {
                    this.IsEnabledField = value;
                    this.RaisePropertyChanged("IsEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StyleBackColor {
            get {
                return this.StyleBackColorField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleBackColorField, value) != true)) {
                    this.StyleBackColorField = value;
                    this.RaisePropertyChanged("StyleBackColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StyleFontFamily {
            get {
                return this.StyleFontFamilyField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleFontFamilyField, value) != true)) {
                    this.StyleFontFamilyField = value;
                    this.RaisePropertyChanged("StyleFontFamily");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StyleFontSize {
            get {
                return this.StyleFontSizeField;
            }
            set {
                if ((this.StyleFontSizeField.Equals(value) != true)) {
                    this.StyleFontSizeField = value;
                    this.RaisePropertyChanged("StyleFontSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StyleForeColor {
            get {
                return this.StyleForeColorField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleForeColorField, value) != true)) {
                    this.StyleForeColorField = value;
                    this.RaisePropertyChanged("StyleForeColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StyleHeight {
            get {
                return this.StyleHeightField;
            }
            set {
                if ((this.StyleHeightField.Equals(value) != true)) {
                    this.StyleHeightField = value;
                    this.RaisePropertyChanged("StyleHeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StyleWidth {
            get {
                return this.StyleWidthField;
            }
            set {
                if ((this.StyleWidthField.Equals(value) != true)) {
                    this.StyleWidthField = value;
                    this.RaisePropertyChanged("StyleWidth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeItem {
            get {
                return this.TypeItemField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeItemField, value) != true)) {
                    this.TypeItemField = value;
                    this.RaisePropertyChanged("TypeItem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UrlImage {
            get {
                return this.UrlImageField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlImageField, value) != true)) {
                    this.UrlImageField = value;
                    this.RaisePropertyChanged("UrlImage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BreadCrumps", Namespace="http://schemas.datacontract.org/2004/07/LiveMultimediaData")]
    [System.SerializableAttribute()]
    public partial class BreadCrumps : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRequiredAuthorizationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRequiredAuthorization {
            get {
                return this.IsRequiredAuthorizationField;
            }
            set {
                if ((this.IsRequiredAuthorizationField.Equals(value) != true)) {
                    this.IsRequiredAuthorizationField = value;
                    this.RaisePropertyChanged("IsRequiredAuthorization");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="enumTypeLog", Namespace="http://schemas.datacontract.org/2004/07/LiveMultimediaData")]
    public enum enumTypeLog : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Information = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="LiveMultimediaService", ConfigurationName="LiveMultimediaService.ILiveMultimediaService")]
    public interface ILiveMultimediaService {
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalLogin", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalLoginResponse")]
        System.Tuple<string, string> LocalLogin(string AccountKey, string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalLogin", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalLoginResponse")]
        System.Threading.Tasks.Task<System.Tuple<string, string>> LocalLoginAsync(string AccountKey, string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalLogout", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalLogoutResponse")]
        string LocalLogout(string AccountKey, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalLogout", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalLogoutResponse")]
        System.Threading.Tasks.Task<string> LocalLogoutAsync(string AccountKey, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalGetListMultimediaFiles", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalGetListMultimediaFilesResponse")]
        System.Tuple<LiveMultimediaSite.LiveMultimediaService.MultimediaFile[], string> LocalGetListMultimediaFiles(string AccountKey, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalGetListMultimediaFiles", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalGetListMultimediaFilesResponse")]
        System.Threading.Tasks.Task<System.Tuple<LiveMultimediaSite.LiveMultimediaService.MultimediaFile[], string>> LocalGetListMultimediaFilesAsync(string AccountKey, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalListMultimediaFilesAdd", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalListMultimediaFilesAddResponse")]
        System.Tuple<string[], string> LocalListMultimediaFilesAdd(string AccountKey, string UserToken, LiveMultimediaSite.LiveMultimediaService.MultimediaFile[] ListMultimediaFiles);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalListMultimediaFilesAdd", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalListMultimediaFilesAddResponse")]
        System.Threading.Tasks.Task<System.Tuple<string[], string>> LocalListMultimediaFilesAddAsync(string AccountKey, string UserToken, LiveMultimediaSite.LiveMultimediaService.MultimediaFile[] ListMultimediaFiles);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalListMultimediaFilesRemove", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalListMultimediaFilesRemoveRespon" +
            "se")]
        string LocalListMultimediaFilesRemove(string AccountKey, string UserToken, LiveMultimediaSite.LiveMultimediaService.MultimediaFile[] ListMultimediaFiles);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalListMultimediaFilesRemove", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalListMultimediaFilesRemoveRespon" +
            "se")]
        System.Threading.Tasks.Task<string> LocalListMultimediaFilesRemoveAsync(string AccountKey, string UserToken, LiveMultimediaSite.LiveMultimediaService.MultimediaFile[] ListMultimediaFiles);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteLogin", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteLoginResponse")]
        System.Tuple<string, string> RemoteLogin(string AccountKey, string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteLogin", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteLoginResponse")]
        System.Threading.Tasks.Task<System.Tuple<string, string>> RemoteLoginAsync(string AccountKey, string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteLogout", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteLogoutResponse")]
        string RemoteLogout(string AccountKey, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteLogout", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteLogoutResponse")]
        System.Threading.Tasks.Task<string> RemoteLogoutAsync(string AccountKey, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteRegisterNewUser", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteRegisterNewUserResponse")]
        System.Tuple<string, string> RemoteRegisterNewUser(string AccountKey, string FirstName, string LastName, string Username, string Password, int IdTariffPlan, string Language);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteRegisterNewUser", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteRegisterNewUserResponse")]
        System.Threading.Tasks.Task<System.Tuple<string, string>> RemoteRegisterNewUserAsync(string AccountKey, string FirstName, string LastName, string Username, string Password, int IdTariffPlan, string Language);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteUpdateUserInfo", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteUpdateUserInfoResponse")]
        string RemoteUpdateUserInfo(string AccountKey, string UserToken, string OldPassword, string NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteUpdateUserInfo", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteUpdateUserInfoResponse")]
        System.Threading.Tasks.Task<string> RemoteUpdateUserInfoAsync(string AccountKey, string UserToken, string OldPassword, string NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetListMultimediaSource", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetListMultimediaSourceResponse")]
        LiveMultimediaSite.LiveMultimediaService.MultimediaSource[] GetListMultimediaSource(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetListMultimediaSource", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetListMultimediaSourceResponse")]
        System.Threading.Tasks.Task<LiveMultimediaSite.LiveMultimediaService.MultimediaSource[]> GetListMultimediaSourceAsync(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalGetSettings", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalGetSettingsResponse")]
        string[] LocalGetSettings(string AccountKey, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalGetSettings", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalGetSettingsResponse")]
        System.Threading.Tasks.Task<string[]> LocalGetSettingsAsync(string AccountKey, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalGetMultimediaFileGUID", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalGetMultimediaFileGUIDResponse")]
        System.Tuple<string[], string> LocalGetMultimediaFileGUID(string AccountKey, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalGetMultimediaFileGUID", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalGetMultimediaFileGUIDResponse")]
        System.Threading.Tasks.Task<System.Tuple<string[], string>> LocalGetMultimediaFileGUIDAsync(string AccountKey, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalSetMultimediaFileBuffer", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalSetMultimediaFileBufferResponse" +
            "")]
        string LocalSetMultimediaFileBuffer(string AccountKey, string UserToken, byte[] MultimediaFileBuffer, bool IsStopTransfer, string IdJob);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalSetMultimediaFileBuffer", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalSetMultimediaFileBufferResponse" +
            "")]
        System.Threading.Tasks.Task<string> LocalSetMultimediaFileBufferAsync(string AccountKey, string UserToken, byte[] MultimediaFileBuffer, bool IsStopTransfer, string IdJob);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalSetMultimediaFileAttributes", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalSetMultimediaFileAttributesResp" +
            "onse")]
        string LocalSetMultimediaFileAttributes(string AccountKey, string UserToken, long MultimediaFileLength, int SpeedServer, string IdJob);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalSetMultimediaFileAttributes", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalSetMultimediaFileAttributesResp" +
            "onse")]
        System.Threading.Tasks.Task<string> LocalSetMultimediaFileAttributesAsync(string AccountKey, string UserToken, long MultimediaFileLength, int SpeedServer, string IdJob);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/OAuthSetToken", ReplyAction="LiveMultimediaService/ILiveMultimediaService/OAuthSetTokenResponse")]
        bool OAuthSetToken(string AccountKey, string UserToken, string Id, LiveMultimediaSite.LiveMultimediaService.OAuthToken OAuthUserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/OAuthSetToken", ReplyAction="LiveMultimediaService/ILiveMultimediaService/OAuthSetTokenResponse")]
        System.Threading.Tasks.Task<bool> OAuthSetTokenAsync(string AccountKey, string UserToken, string Id, LiveMultimediaSite.LiveMultimediaService.OAuthToken OAuthUserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistSave", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistSaveResponse")]
        string RemotePlaylistSave(string UserToken, string Playlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistSave", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistSaveResponse")]
        System.Threading.Tasks.Task<string> RemotePlaylistSaveAsync(string UserToken, string Playlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistLoad", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistLoadResponse")]
        LiveMultimediaSite.LiveMultimediaService.PlaylistObject[] RemotePlaylistLoad(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistLoad", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistLoadResponse")]
        System.Threading.Tasks.Task<LiveMultimediaSite.LiveMultimediaService.PlaylistObject[]> RemotePlaylistLoadAsync(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistDelete", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistDeleteResponse")]
        bool RemotePlaylistDelete(string UserToken, long IdPlaylist);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistDelete", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistDeleteResponse")]
        System.Threading.Tasks.Task<bool> RemotePlaylistDeleteAsync(string UserToken, long IdPlaylist);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistItemSave", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistItemSaveResponse")]
        bool RemotePlaylistItemSave(string UserToken, long IdPlaylist, int IdTypeMultimediaSource, string IdMultimediaItem, string MultimediaItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistItemSave", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistItemSaveResponse")]
        System.Threading.Tasks.Task<bool> RemotePlaylistItemSaveAsync(string UserToken, long IdPlaylist, int IdTypeMultimediaSource, string IdMultimediaItem, string MultimediaItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistItemRemove", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistItemRemoveResponse")]
        bool RemotePlaylistItemRemove(string UserToken, long IdPlaylistItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistItemRemove", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemotePlaylistItemRemoveResponse")]
        System.Threading.Tasks.Task<bool> RemotePlaylistItemRemoveAsync(string UserToken, long IdPlaylistItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetLanguages", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetLanguagesResponse")]
        System.Tuple<LiveMultimediaSite.LiveMultimediaService.LanguageInfo[], string> GetLanguages(string Language);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetLanguages", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetLanguagesResponse")]
        System.Threading.Tasks.Task<System.Tuple<LiveMultimediaSite.LiveMultimediaService.LanguageInfo[], string>> GetLanguagesAsync(string Language);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalGetLocalization", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalGetLocalizationResponse")]
        System.Tuple<LiveMultimediaSite.LiveMultimediaService.LocalizationElement[], string, string> LocalGetLocalization(string AccountKey, string Language);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalGetLocalization", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalGetLocalizationResponse")]
        System.Threading.Tasks.Task<System.Tuple<LiveMultimediaSite.LiveMultimediaService.LocalizationElement[], string, string>> LocalGetLocalizationAsync(string AccountKey, string Language);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetLocalization", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetLocalizationResponse")]
        System.Tuple<LiveMultimediaSite.LiveMultimediaService.LocalizationElement[], string, string> RemoteGetLocalization(string AccountKey, string Language);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetLocalization", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetLocalizationResponse")]
        System.Threading.Tasks.Task<System.Tuple<LiveMultimediaSite.LiveMultimediaService.LocalizationElement[], string, string>> RemoteGetLocalizationAsync(string AccountKey, string Language);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetItems", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetItemsResponse")]
        System.Tuple<LiveMultimediaSite.LiveMultimediaService.MultimediaItem[], string> GetItems(string AccountKey, string Language, string Id, string GroupBy, string OrderBy, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetItems", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetItemsResponse")]
        System.Threading.Tasks.Task<System.Tuple<LiveMultimediaSite.LiveMultimediaService.MultimediaItem[], string>> GetItemsAsync(string AccountKey, string Language, string Id, string GroupBy, string OrderBy, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetBreadCrumbs", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetBreadCrumbsResponse")]
        System.Tuple<LiveMultimediaSite.LiveMultimediaService.BreadCrumps[], string> GetBreadCrumbs(string AccountKey, string Language, string Source, string ParentId, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetBreadCrumbs", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetBreadCrumbsResponse")]
        System.Threading.Tasks.Task<System.Tuple<LiveMultimediaSite.LiveMultimediaService.BreadCrumps[], string>> GetBreadCrumbsAsync(string AccountKey, string Language, string Source, string ParentId, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/CheckAuthorization", ReplyAction="LiveMultimediaService/ILiveMultimediaService/CheckAuthorizationResponse")]
        System.Collections.Specialized.StringDictionary CheckAuthorization(string AccountKey, string Id, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/CheckAuthorization", ReplyAction="LiveMultimediaService/ILiveMultimediaService/CheckAuthorizationResponse")]
        System.Threading.Tasks.Task<System.Collections.Specialized.StringDictionary> CheckAuthorizationAsync(string AccountKey, string Id, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteCreateMultimediaJob", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteCreateMultimediaJobResponse")]
        System.Tuple<System.Collections.Specialized.StringDictionary, string> RemoteCreateMultimediaJob(string AccountKey, string Id, string UniqueMultimediaRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteCreateMultimediaJob", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteCreateMultimediaJobResponse")]
        System.Threading.Tasks.Task<System.Tuple<System.Collections.Specialized.StringDictionary, string>> RemoteCreateMultimediaJobAsync(string AccountKey, string Id, string UniqueMultimediaRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteCancelMultimediaJob", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteCancelMultimediaJobResponse")]
        string RemoteCancelMultimediaJob(string AccountKey, string UserToken, string IdJob);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteCancelMultimediaJob", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteCancelMultimediaJobResponse")]
        System.Threading.Tasks.Task<string> RemoteCancelMultimediaJobAsync(string AccountKey, string UserToken, string IdJob);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetMultimedia", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetMultimediaResponse")]
        System.IO.Stream GetMultimedia(string AccountKey, string IdJob, long Range1, long Range2);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetMultimedia", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetMultimediaResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetMultimediaAsync(string AccountKey, string IdJob, long Range1, long Range2);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetTypeMultimedia", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetTypeMultimediaResponse")]
        System.Tuple<LiveMultimediaSite.LiveMultimediaService.LocalizationElement, string> GetTypeMultimedia(string AccountKey, string Language);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetTypeMultimedia", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetTypeMultimediaResponse")]
        System.Threading.Tasks.Task<System.Tuple<LiveMultimediaSite.LiveMultimediaService.LocalizationElement, string>> GetTypeMultimediaAsync(string AccountKey, string Language);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/Tracing", ReplyAction="LiveMultimediaService/ILiveMultimediaService/TracingResponse")]
        void Tracing(string AccountKey, LiveMultimediaSite.LiveMultimediaService.enumTypeLog TypeLog, string Scope, string Procedure, string Message, string ClientIp, System.Nullable<int> ClientPort, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/Tracing", ReplyAction="LiveMultimediaService/ILiveMultimediaService/TracingResponse")]
        System.Threading.Tasks.Task TracingAsync(string AccountKey, LiveMultimediaSite.LiveMultimediaService.enumTypeLog TypeLog, string Scope, string Procedure, string Message, string ClientIp, System.Nullable<int> ClientPort, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/TraceInformation", ReplyAction="LiveMultimediaService/ILiveMultimediaService/TraceInformationResponse")]
        void TraceInformation(string AccountKey, string Scope, string Procedure, string Message, string ClientIp, System.Nullable<int> ClientPort, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/TraceInformation", ReplyAction="LiveMultimediaService/ILiveMultimediaService/TraceInformationResponse")]
        System.Threading.Tasks.Task TraceInformationAsync(string AccountKey, string Scope, string Procedure, string Message, string ClientIp, System.Nullable<int> ClientPort, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/TraceWarning", ReplyAction="LiveMultimediaService/ILiveMultimediaService/TraceWarningResponse")]
        void TraceWarning(string AccountKey, string Scope, string Procedure, string Message, string ClientIp, System.Nullable<int> ClientPort, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/TraceWarning", ReplyAction="LiveMultimediaService/ILiveMultimediaService/TraceWarningResponse")]
        System.Threading.Tasks.Task TraceWarningAsync(string AccountKey, string Scope, string Procedure, string Message, string ClientIp, System.Nullable<int> ClientPort, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/TraceError", ReplyAction="LiveMultimediaService/ILiveMultimediaService/TraceErrorResponse")]
        void TraceError(string AccountKey, string Scope, string Procedure, string Message, string ClientIp, System.Nullable<int> ClientPort, string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/TraceError", ReplyAction="LiveMultimediaService/ILiveMultimediaService/TraceErrorResponse")]
        System.Threading.Tasks.Task TraceErrorAsync(string AccountKey, string Scope, string Procedure, string Message, string ClientIp, System.Nullable<int> ClientPort, string UserToken);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILiveMultimediaServiceChannel : LiveMultimediaSite.LiveMultimediaService.ILiveMultimediaService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LiveMultimediaServiceClient : System.ServiceModel.ClientBase<LiveMultimediaSite.LiveMultimediaService.ILiveMultimediaService>, LiveMultimediaSite.LiveMultimediaService.ILiveMultimediaService {
        
        public LiveMultimediaServiceClient() {
        }
        
        public LiveMultimediaServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LiveMultimediaServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LiveMultimediaServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LiveMultimediaServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Tuple<string, string> LocalLogin(string AccountKey, string Username, string Password) {
            return base.Channel.LocalLogin(AccountKey, Username, Password);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<string, string>> LocalLoginAsync(string AccountKey, string Username, string Password) {
            return base.Channel.LocalLoginAsync(AccountKey, Username, Password);
        }
        
        public string LocalLogout(string AccountKey, string UserToken) {
            return base.Channel.LocalLogout(AccountKey, UserToken);
        }
        
        public System.Threading.Tasks.Task<string> LocalLogoutAsync(string AccountKey, string UserToken) {
            return base.Channel.LocalLogoutAsync(AccountKey, UserToken);
        }
        
        public System.Tuple<LiveMultimediaSite.LiveMultimediaService.MultimediaFile[], string> LocalGetListMultimediaFiles(string AccountKey, string UserToken) {
            return base.Channel.LocalGetListMultimediaFiles(AccountKey, UserToken);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<LiveMultimediaSite.LiveMultimediaService.MultimediaFile[], string>> LocalGetListMultimediaFilesAsync(string AccountKey, string UserToken) {
            return base.Channel.LocalGetListMultimediaFilesAsync(AccountKey, UserToken);
        }
        
        public System.Tuple<string[], string> LocalListMultimediaFilesAdd(string AccountKey, string UserToken, LiveMultimediaSite.LiveMultimediaService.MultimediaFile[] ListMultimediaFiles) {
            return base.Channel.LocalListMultimediaFilesAdd(AccountKey, UserToken, ListMultimediaFiles);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<string[], string>> LocalListMultimediaFilesAddAsync(string AccountKey, string UserToken, LiveMultimediaSite.LiveMultimediaService.MultimediaFile[] ListMultimediaFiles) {
            return base.Channel.LocalListMultimediaFilesAddAsync(AccountKey, UserToken, ListMultimediaFiles);
        }
        
        public string LocalListMultimediaFilesRemove(string AccountKey, string UserToken, LiveMultimediaSite.LiveMultimediaService.MultimediaFile[] ListMultimediaFiles) {
            return base.Channel.LocalListMultimediaFilesRemove(AccountKey, UserToken, ListMultimediaFiles);
        }
        
        public System.Threading.Tasks.Task<string> LocalListMultimediaFilesRemoveAsync(string AccountKey, string UserToken, LiveMultimediaSite.LiveMultimediaService.MultimediaFile[] ListMultimediaFiles) {
            return base.Channel.LocalListMultimediaFilesRemoveAsync(AccountKey, UserToken, ListMultimediaFiles);
        }
        
        public System.Tuple<string, string> RemoteLogin(string AccountKey, string Username, string Password) {
            return base.Channel.RemoteLogin(AccountKey, Username, Password);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<string, string>> RemoteLoginAsync(string AccountKey, string Username, string Password) {
            return base.Channel.RemoteLoginAsync(AccountKey, Username, Password);
        }
        
        public string RemoteLogout(string AccountKey, string UserToken) {
            return base.Channel.RemoteLogout(AccountKey, UserToken);
        }
        
        public System.Threading.Tasks.Task<string> RemoteLogoutAsync(string AccountKey, string UserToken) {
            return base.Channel.RemoteLogoutAsync(AccountKey, UserToken);
        }
        
        public System.Tuple<string, string> RemoteRegisterNewUser(string AccountKey, string FirstName, string LastName, string Username, string Password, int IdTariffPlan, string Language) {
            return base.Channel.RemoteRegisterNewUser(AccountKey, FirstName, LastName, Username, Password, IdTariffPlan, Language);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<string, string>> RemoteRegisterNewUserAsync(string AccountKey, string FirstName, string LastName, string Username, string Password, int IdTariffPlan, string Language) {
            return base.Channel.RemoteRegisterNewUserAsync(AccountKey, FirstName, LastName, Username, Password, IdTariffPlan, Language);
        }
        
        public string RemoteUpdateUserInfo(string AccountKey, string UserToken, string OldPassword, string NewPassword) {
            return base.Channel.RemoteUpdateUserInfo(AccountKey, UserToken, OldPassword, NewPassword);
        }
        
        public System.Threading.Tasks.Task<string> RemoteUpdateUserInfoAsync(string AccountKey, string UserToken, string OldPassword, string NewPassword) {
            return base.Channel.RemoteUpdateUserInfoAsync(AccountKey, UserToken, OldPassword, NewPassword);
        }
        
        public LiveMultimediaSite.LiveMultimediaService.MultimediaSource[] GetListMultimediaSource(string UserToken) {
            return base.Channel.GetListMultimediaSource(UserToken);
        }
        
        public System.Threading.Tasks.Task<LiveMultimediaSite.LiveMultimediaService.MultimediaSource[]> GetListMultimediaSourceAsync(string UserToken) {
            return base.Channel.GetListMultimediaSourceAsync(UserToken);
        }
        
        public string[] LocalGetSettings(string AccountKey, string UserToken) {
            return base.Channel.LocalGetSettings(AccountKey, UserToken);
        }
        
        public System.Threading.Tasks.Task<string[]> LocalGetSettingsAsync(string AccountKey, string UserToken) {
            return base.Channel.LocalGetSettingsAsync(AccountKey, UserToken);
        }
        
        public System.Tuple<string[], string> LocalGetMultimediaFileGUID(string AccountKey, string UserToken) {
            return base.Channel.LocalGetMultimediaFileGUID(AccountKey, UserToken);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<string[], string>> LocalGetMultimediaFileGUIDAsync(string AccountKey, string UserToken) {
            return base.Channel.LocalGetMultimediaFileGUIDAsync(AccountKey, UserToken);
        }
        
        public string LocalSetMultimediaFileBuffer(string AccountKey, string UserToken, byte[] MultimediaFileBuffer, bool IsStopTransfer, string IdJob) {
            return base.Channel.LocalSetMultimediaFileBuffer(AccountKey, UserToken, MultimediaFileBuffer, IsStopTransfer, IdJob);
        }
        
        public System.Threading.Tasks.Task<string> LocalSetMultimediaFileBufferAsync(string AccountKey, string UserToken, byte[] MultimediaFileBuffer, bool IsStopTransfer, string IdJob) {
            return base.Channel.LocalSetMultimediaFileBufferAsync(AccountKey, UserToken, MultimediaFileBuffer, IsStopTransfer, IdJob);
        }
        
        public string LocalSetMultimediaFileAttributes(string AccountKey, string UserToken, long MultimediaFileLength, int SpeedServer, string IdJob) {
            return base.Channel.LocalSetMultimediaFileAttributes(AccountKey, UserToken, MultimediaFileLength, SpeedServer, IdJob);
        }
        
        public System.Threading.Tasks.Task<string> LocalSetMultimediaFileAttributesAsync(string AccountKey, string UserToken, long MultimediaFileLength, int SpeedServer, string IdJob) {
            return base.Channel.LocalSetMultimediaFileAttributesAsync(AccountKey, UserToken, MultimediaFileLength, SpeedServer, IdJob);
        }
        
        public bool OAuthSetToken(string AccountKey, string UserToken, string Id, LiveMultimediaSite.LiveMultimediaService.OAuthToken OAuthUserToken) {
            return base.Channel.OAuthSetToken(AccountKey, UserToken, Id, OAuthUserToken);
        }
        
        public System.Threading.Tasks.Task<bool> OAuthSetTokenAsync(string AccountKey, string UserToken, string Id, LiveMultimediaSite.LiveMultimediaService.OAuthToken OAuthUserToken) {
            return base.Channel.OAuthSetTokenAsync(AccountKey, UserToken, Id, OAuthUserToken);
        }
        
        public string RemotePlaylistSave(string UserToken, string Playlist) {
            return base.Channel.RemotePlaylistSave(UserToken, Playlist);
        }
        
        public System.Threading.Tasks.Task<string> RemotePlaylistSaveAsync(string UserToken, string Playlist) {
            return base.Channel.RemotePlaylistSaveAsync(UserToken, Playlist);
        }
        
        public LiveMultimediaSite.LiveMultimediaService.PlaylistObject[] RemotePlaylistLoad(string UserToken) {
            return base.Channel.RemotePlaylistLoad(UserToken);
        }
        
        public System.Threading.Tasks.Task<LiveMultimediaSite.LiveMultimediaService.PlaylistObject[]> RemotePlaylistLoadAsync(string UserToken) {
            return base.Channel.RemotePlaylistLoadAsync(UserToken);
        }
        
        public bool RemotePlaylistDelete(string UserToken, long IdPlaylist) {
            return base.Channel.RemotePlaylistDelete(UserToken, IdPlaylist);
        }
        
        public System.Threading.Tasks.Task<bool> RemotePlaylistDeleteAsync(string UserToken, long IdPlaylist) {
            return base.Channel.RemotePlaylistDeleteAsync(UserToken, IdPlaylist);
        }
        
        public bool RemotePlaylistItemSave(string UserToken, long IdPlaylist, int IdTypeMultimediaSource, string IdMultimediaItem, string MultimediaItem) {
            return base.Channel.RemotePlaylistItemSave(UserToken, IdPlaylist, IdTypeMultimediaSource, IdMultimediaItem, MultimediaItem);
        }
        
        public System.Threading.Tasks.Task<bool> RemotePlaylistItemSaveAsync(string UserToken, long IdPlaylist, int IdTypeMultimediaSource, string IdMultimediaItem, string MultimediaItem) {
            return base.Channel.RemotePlaylistItemSaveAsync(UserToken, IdPlaylist, IdTypeMultimediaSource, IdMultimediaItem, MultimediaItem);
        }
        
        public bool RemotePlaylistItemRemove(string UserToken, long IdPlaylistItem) {
            return base.Channel.RemotePlaylistItemRemove(UserToken, IdPlaylistItem);
        }
        
        public System.Threading.Tasks.Task<bool> RemotePlaylistItemRemoveAsync(string UserToken, long IdPlaylistItem) {
            return base.Channel.RemotePlaylistItemRemoveAsync(UserToken, IdPlaylistItem);
        }
        
        public System.Tuple<LiveMultimediaSite.LiveMultimediaService.LanguageInfo[], string> GetLanguages(string Language) {
            return base.Channel.GetLanguages(Language);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<LiveMultimediaSite.LiveMultimediaService.LanguageInfo[], string>> GetLanguagesAsync(string Language) {
            return base.Channel.GetLanguagesAsync(Language);
        }
        
        public System.Tuple<LiveMultimediaSite.LiveMultimediaService.LocalizationElement[], string, string> LocalGetLocalization(string AccountKey, string Language) {
            return base.Channel.LocalGetLocalization(AccountKey, Language);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<LiveMultimediaSite.LiveMultimediaService.LocalizationElement[], string, string>> LocalGetLocalizationAsync(string AccountKey, string Language) {
            return base.Channel.LocalGetLocalizationAsync(AccountKey, Language);
        }
        
        public System.Tuple<LiveMultimediaSite.LiveMultimediaService.LocalizationElement[], string, string> RemoteGetLocalization(string AccountKey, string Language) {
            return base.Channel.RemoteGetLocalization(AccountKey, Language);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<LiveMultimediaSite.LiveMultimediaService.LocalizationElement[], string, string>> RemoteGetLocalizationAsync(string AccountKey, string Language) {
            return base.Channel.RemoteGetLocalizationAsync(AccountKey, Language);
        }
        
        public System.Tuple<LiveMultimediaSite.LiveMultimediaService.MultimediaItem[], string> GetItems(string AccountKey, string Language, string Id, string GroupBy, string OrderBy, string UserToken) {
            return base.Channel.GetItems(AccountKey, Language, Id, GroupBy, OrderBy, UserToken);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<LiveMultimediaSite.LiveMultimediaService.MultimediaItem[], string>> GetItemsAsync(string AccountKey, string Language, string Id, string GroupBy, string OrderBy, string UserToken) {
            return base.Channel.GetItemsAsync(AccountKey, Language, Id, GroupBy, OrderBy, UserToken);
        }
        
        public System.Tuple<LiveMultimediaSite.LiveMultimediaService.BreadCrumps[], string> GetBreadCrumbs(string AccountKey, string Language, string Source, string ParentId, string UserToken) {
            return base.Channel.GetBreadCrumbs(AccountKey, Language, Source, ParentId, UserToken);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<LiveMultimediaSite.LiveMultimediaService.BreadCrumps[], string>> GetBreadCrumbsAsync(string AccountKey, string Language, string Source, string ParentId, string UserToken) {
            return base.Channel.GetBreadCrumbsAsync(AccountKey, Language, Source, ParentId, UserToken);
        }
        
        public System.Collections.Specialized.StringDictionary CheckAuthorization(string AccountKey, string Id, string UserToken) {
            return base.Channel.CheckAuthorization(AccountKey, Id, UserToken);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Specialized.StringDictionary> CheckAuthorizationAsync(string AccountKey, string Id, string UserToken) {
            return base.Channel.CheckAuthorizationAsync(AccountKey, Id, UserToken);
        }
        
        public System.Tuple<System.Collections.Specialized.StringDictionary, string> RemoteCreateMultimediaJob(string AccountKey, string Id, string UniqueMultimediaRequest) {
            return base.Channel.RemoteCreateMultimediaJob(AccountKey, Id, UniqueMultimediaRequest);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<System.Collections.Specialized.StringDictionary, string>> RemoteCreateMultimediaJobAsync(string AccountKey, string Id, string UniqueMultimediaRequest) {
            return base.Channel.RemoteCreateMultimediaJobAsync(AccountKey, Id, UniqueMultimediaRequest);
        }
        
        public string RemoteCancelMultimediaJob(string AccountKey, string UserToken, string IdJob) {
            return base.Channel.RemoteCancelMultimediaJob(AccountKey, UserToken, IdJob);
        }
        
        public System.Threading.Tasks.Task<string> RemoteCancelMultimediaJobAsync(string AccountKey, string UserToken, string IdJob) {
            return base.Channel.RemoteCancelMultimediaJobAsync(AccountKey, UserToken, IdJob);
        }
        
        public System.IO.Stream GetMultimedia(string AccountKey, string IdJob, long Range1, long Range2) {
            return base.Channel.GetMultimedia(AccountKey, IdJob, Range1, Range2);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetMultimediaAsync(string AccountKey, string IdJob, long Range1, long Range2) {
            return base.Channel.GetMultimediaAsync(AccountKey, IdJob, Range1, Range2);
        }
        
        public System.Tuple<LiveMultimediaSite.LiveMultimediaService.LocalizationElement, string> GetTypeMultimedia(string AccountKey, string Language) {
            return base.Channel.GetTypeMultimedia(AccountKey, Language);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<LiveMultimediaSite.LiveMultimediaService.LocalizationElement, string>> GetTypeMultimediaAsync(string AccountKey, string Language) {
            return base.Channel.GetTypeMultimediaAsync(AccountKey, Language);
        }
        
        public void Tracing(string AccountKey, LiveMultimediaSite.LiveMultimediaService.enumTypeLog TypeLog, string Scope, string Procedure, string Message, string ClientIp, System.Nullable<int> ClientPort, string UserToken) {
            base.Channel.Tracing(AccountKey, TypeLog, Scope, Procedure, Message, ClientIp, ClientPort, UserToken);
        }
        
        public System.Threading.Tasks.Task TracingAsync(string AccountKey, LiveMultimediaSite.LiveMultimediaService.enumTypeLog TypeLog, string Scope, string Procedure, string Message, string ClientIp, System.Nullable<int> ClientPort, string UserToken) {
            return base.Channel.TracingAsync(AccountKey, TypeLog, Scope, Procedure, Message, ClientIp, ClientPort, UserToken);
        }
        
        public void TraceInformation(string AccountKey, string Scope, string Procedure, string Message, string ClientIp, System.Nullable<int> ClientPort, string UserToken) {
            base.Channel.TraceInformation(AccountKey, Scope, Procedure, Message, ClientIp, ClientPort, UserToken);
        }
        
        public System.Threading.Tasks.Task TraceInformationAsync(string AccountKey, string Scope, string Procedure, string Message, string ClientIp, System.Nullable<int> ClientPort, string UserToken) {
            return base.Channel.TraceInformationAsync(AccountKey, Scope, Procedure, Message, ClientIp, ClientPort, UserToken);
        }
        
        public void TraceWarning(string AccountKey, string Scope, string Procedure, string Message, string ClientIp, System.Nullable<int> ClientPort, string UserToken) {
            base.Channel.TraceWarning(AccountKey, Scope, Procedure, Message, ClientIp, ClientPort, UserToken);
        }
        
        public System.Threading.Tasks.Task TraceWarningAsync(string AccountKey, string Scope, string Procedure, string Message, string ClientIp, System.Nullable<int> ClientPort, string UserToken) {
            return base.Channel.TraceWarningAsync(AccountKey, Scope, Procedure, Message, ClientIp, ClientPort, UserToken);
        }
        
        public void TraceError(string AccountKey, string Scope, string Procedure, string Message, string ClientIp, System.Nullable<int> ClientPort, string UserToken) {
            base.Channel.TraceError(AccountKey, Scope, Procedure, Message, ClientIp, ClientPort, UserToken);
        }
        
        public System.Threading.Tasks.Task TraceErrorAsync(string AccountKey, string Scope, string Procedure, string Message, string ClientIp, System.Nullable<int> ClientPort, string UserToken) {
            return base.Channel.TraceErrorAsync(AccountKey, Scope, Procedure, Message, ClientIp, ClientPort, UserToken);
        }
    }
}
