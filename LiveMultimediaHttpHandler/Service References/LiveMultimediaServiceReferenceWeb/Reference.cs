//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18010
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultimediaFile", Namespace="http://schemas.datacontract.org/2004/07/LiveMultimediaData")]
    [System.SerializableAttribute()]
    public partial class MultimediaFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlbumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeywordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MultimediaFileGUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeMultimediaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isSelectMultimediaFileField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Album {
            get {
                return this.AlbumField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumField, value) != true)) {
                    this.AlbumField = value;
                    this.RaisePropertyChanged("Album");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comments {
            get {
                return this.CommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsField, value) != true)) {
                    this.CommentsField = value;
                    this.RaisePropertyChanged("Comments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullPath {
            get {
                return this.FullPathField;
            }
            set {
                if ((object.ReferenceEquals(this.FullPathField, value) != true)) {
                    this.FullPathField = value;
                    this.RaisePropertyChanged("FullPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Keywords {
            get {
                return this.KeywordsField;
            }
            set {
                if ((object.ReferenceEquals(this.KeywordsField, value) != true)) {
                    this.KeywordsField = value;
                    this.RaisePropertyChanged("Keywords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MultimediaFileGUID {
            get {
                return this.MultimediaFileGUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MultimediaFileGUIDField, value) != true)) {
                    this.MultimediaFileGUIDField = value;
                    this.RaisePropertyChanged("MultimediaFileGUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Source {
            get {
                return this.SourceField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceField, value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeMultimedia {
            get {
                return this.TypeMultimediaField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeMultimediaField, value) != true)) {
                    this.TypeMultimediaField = value;
                    this.RaisePropertyChanged("TypeMultimedia");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isSelectMultimediaFile {
            get {
                return this.isSelectMultimediaFileField;
            }
            set {
                if ((this.isSelectMultimediaFileField.Equals(value) != true)) {
                    this.isSelectMultimediaFileField = value;
                    this.RaisePropertyChanged("isSelectMultimediaFile");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientInternetBrowser", Namespace="http://schemas.datacontract.org/2004/07/LiveMultimediaData")]
    [System.SerializableAttribute()]
    public partial class ClientInternetBrowser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrowserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrowserVersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BrowserName {
            get {
                return this.BrowserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BrowserNameField, value) != true)) {
                    this.BrowserNameField = value;
                    this.RaisePropertyChanged("BrowserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BrowserVersion {
            get {
                return this.BrowserVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.BrowserVersionField, value) != true)) {
                    this.BrowserVersionField = value;
                    this.RaisePropertyChanged("BrowserVersion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultimediaSource", Namespace="http://schemas.datacontract.org/2004/07/LiveMultimediaData")]
    [System.SerializableAttribute()]
    public partial class MultimediaSource : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdMultimediaSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameMultimediaSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleBackColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleBorderColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StyleFontSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleForeColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StyleHeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StyleWidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleMultimediaSourceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdMultimediaSource {
            get {
                return this.IdMultimediaSourceField;
            }
            set {
                if ((this.IdMultimediaSourceField.Equals(value) != true)) {
                    this.IdMultimediaSourceField = value;
                    this.RaisePropertyChanged("IdMultimediaSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameMultimediaSource {
            get {
                return this.NameMultimediaSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.NameMultimediaSourceField, value) != true)) {
                    this.NameMultimediaSourceField = value;
                    this.RaisePropertyChanged("NameMultimediaSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StyleBackColor {
            get {
                return this.StyleBackColorField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleBackColorField, value) != true)) {
                    this.StyleBackColorField = value;
                    this.RaisePropertyChanged("StyleBackColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StyleBorderColor {
            get {
                return this.StyleBorderColorField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleBorderColorField, value) != true)) {
                    this.StyleBorderColorField = value;
                    this.RaisePropertyChanged("StyleBorderColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StyleFontSize {
            get {
                return this.StyleFontSizeField;
            }
            set {
                if ((this.StyleFontSizeField.Equals(value) != true)) {
                    this.StyleFontSizeField = value;
                    this.RaisePropertyChanged("StyleFontSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StyleForeColor {
            get {
                return this.StyleForeColorField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleForeColorField, value) != true)) {
                    this.StyleForeColorField = value;
                    this.RaisePropertyChanged("StyleForeColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StyleHeight {
            get {
                return this.StyleHeightField;
            }
            set {
                if ((this.StyleHeightField.Equals(value) != true)) {
                    this.StyleHeightField = value;
                    this.RaisePropertyChanged("StyleHeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StyleName {
            get {
                return this.StyleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleNameField, value) != true)) {
                    this.StyleNameField = value;
                    this.RaisePropertyChanged("StyleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StyleWidth {
            get {
                return this.StyleWidthField;
            }
            set {
                if ((this.StyleWidthField.Equals(value) != true)) {
                    this.StyleWidthField = value;
                    this.RaisePropertyChanged("StyleWidth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TitleMultimediaSource {
            get {
                return this.TitleMultimediaSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleMultimediaSourceField, value) != true)) {
                    this.TitleMultimediaSourceField = value;
                    this.RaisePropertyChanged("TitleMultimediaSource");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="LiveMultimediaService", ConfigurationName="LiveMultimediaServiceReferenceWeb.ILiveMultimediaService")]
    public interface ILiveMultimediaService {
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalLogin", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalLoginResponse")]
        string LocalLogin(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalLogin", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalLoginResponse")]
        System.Threading.Tasks.Task<string> LocalLoginAsync(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalCheckRequestMultimediaFromServe" +
            "r", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalCheckRequestMultimediaFromServe" +
            "rResponse")]
        string LocalCheckRequestMultimediaFromServer(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalCheckRequestMultimediaFromServe" +
            "r", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalCheckRequestMultimediaFromServe" +
            "rResponse")]
        System.Threading.Tasks.Task<string> LocalCheckRequestMultimediaFromServerAsync(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalGetListMultimediaFiles", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalGetListMultimediaFilesResponse")]
        LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.MultimediaFile[] LocalGetListMultimediaFiles(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalGetListMultimediaFiles", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalGetListMultimediaFilesResponse")]
        System.Threading.Tasks.Task<LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.MultimediaFile[]> LocalGetListMultimediaFilesAsync(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalSaveListMultimediaFiles", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalSaveListMultimediaFilesResponse" +
            "")]
        void LocalSaveListMultimediaFiles(string UserToken, string[] ListMultimediaFiles);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/LocalSaveListMultimediaFiles", ReplyAction="LiveMultimediaService/ILiveMultimediaService/LocalSaveListMultimediaFilesResponse" +
            "")]
        System.Threading.Tasks.Task LocalSaveListMultimediaFilesAsync(string UserToken, string[] ListMultimediaFiles);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteLogin", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteLoginResponse")]
        string RemoteLogin(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteLogin", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteLoginResponse")]
        System.Threading.Tasks.Task<string> RemoteLoginAsync(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteRegisterNewUser", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteRegisterNewUserResponse")]
        LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteRegisterNewUserResponse RemoteRegisterNewUser(LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteRegisterNewUserRequest request);
        
        // CODEGEN: Идет формирование контракта на сообщение, так как операция может иметь много возвращаемых значений.
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteRegisterNewUser", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteRegisterNewUserResponse")]
        System.Threading.Tasks.Task<LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteRegisterNewUserResponse> RemoteRegisterNewUserAsync(LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteRegisterNewUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteTransferMultimediaFileGUIDFrom" +
            "ServerToClient", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteTransferMultimediaFileGUIDFrom" +
            "ServerToClientResponse")]
        void RemoteTransferMultimediaFileGUIDFromServerToClient(string UserToken, string MultimediaFileGUID, LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.ClientInternetBrowser ClientBrowser);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteTransferMultimediaFileGUIDFrom" +
            "ServerToClient", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteTransferMultimediaFileGUIDFrom" +
            "ServerToClientResponse")]
        System.Threading.Tasks.Task RemoteTransferMultimediaFileGUIDFromServerToClientAsync(string UserToken, string MultimediaFileGUID, LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.ClientInternetBrowser ClientBrowser);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/InsertMessageStreamChunkCount", ReplyAction="LiveMultimediaService/ILiveMultimediaService/InsertMessageStreamChunkCountRespons" +
            "e")]
        int InsertMessageStreamChunkCount(string UserToken, byte[] buffer, string MultimediaFileGUID, bool isFinalTransaction, bool isFirstCall, long LengthFile, long Position, int ChunkCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/InsertMessageStreamChunkCount", ReplyAction="LiveMultimediaService/ILiveMultimediaService/InsertMessageStreamChunkCountRespons" +
            "e")]
        System.Threading.Tasks.Task<int> InsertMessageStreamChunkCountAsync(string UserToken, byte[] buffer, string MultimediaFileGUID, bool isFinalTransaction, bool isFirstCall, long LengthFile, long Position, int ChunkCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteLiveMultimedia_Next", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteLiveMultimedia_NextResponse")]
        void RemoteLiveMultimedia_Next(string UserToken, string MultimediaFileGUID, LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.ClientInternetBrowser ClientBrowser);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteLiveMultimedia_Next", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteLiveMultimedia_NextResponse")]
        System.Threading.Tasks.Task RemoteLiveMultimedia_NextAsync(string UserToken, string MultimediaFileGUID, LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.ClientInternetBrowser ClientBrowser);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteLiveMultimedia_Unload", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteLiveMultimedia_UnloadResponse")]
        void RemoteLiveMultimedia_Unload(string UserToken, string MultimediaFileGUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteLiveMultimedia_Unload", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteLiveMultimedia_UnloadResponse")]
        System.Threading.Tasks.Task RemoteLiveMultimedia_UnloadAsync(string UserToken, string MultimediaFileGUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetContentMultimediaSource", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetContentMultimediaSourceResp" +
            "onse")]
        string[] RemoteGetContentMultimediaSource(string UserToken, int IdMultimediaSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetContentMultimediaSource", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetContentMultimediaSourceResp" +
            "onse")]
        System.Threading.Tasks.Task<string[]> RemoteGetContentMultimediaSourceAsync(string UserToken, int IdMultimediaSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetListMultimediaSource", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetListMultimediaSourceResponse")]
        LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.MultimediaSource[] GetListMultimediaSource(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetListMultimediaSource", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetListMultimediaSourceResponse")]
        System.Threading.Tasks.Task<LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.MultimediaSource[]> GetListMultimediaSourceAsync(string UserToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetListMultimediaByAlbum", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetListMultimediaByAlbumResponse")]
        LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.MultimediaFile[] GetListMultimediaByAlbum(string UserToken, string Album);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/GetListMultimediaByAlbum", ReplyAction="LiveMultimediaService/ILiveMultimediaService/GetListMultimediaByAlbumResponse")]
        System.Threading.Tasks.Task<LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.MultimediaFile[]> GetListMultimediaByAlbumAsync(string UserToken, string Album);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteSetMultimediaFilebyUserToken", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteSetMultimediaFilebyUserTokenRe" +
            "sponse")]
        LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteSetMultimediaFilebyUserTokenResponse RemoteSetMultimediaFilebyUserToken(LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteSetMultimediaFilebyUserTokenRequest request);
        
        // CODEGEN: Идет формирование контракта на сообщение, так как операция может иметь много возвращаемых значений.
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteSetMultimediaFilebyUserToken", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteSetMultimediaFilebyUserTokenRe" +
            "sponse")]
        System.Threading.Tasks.Task<LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteSetMultimediaFilebyUserTokenResponse> RemoteSetMultimediaFilebyUserTokenAsync(LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteSetMultimediaFilebyUserTokenRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetMultimediaFilebyUserToken", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetMultimediaFilebyUserTokenRe" +
            "sponse")]
        LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteGetMultimediaFilebyUserTokenResponse RemoteGetMultimediaFilebyUserToken(LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteGetMultimediaFilebyUserTokenRequest request);
        
        // CODEGEN: Идет формирование контракта на сообщение, так как операция может иметь много возвращаемых значений.
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/RemoteGetMultimediaFilebyUserToken", ReplyAction="LiveMultimediaService/ILiveMultimediaService/RemoteGetMultimediaFilebyUserTokenRe" +
            "sponse")]
        System.Threading.Tasks.Task<LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteGetMultimediaFilebyUserTokenResponse> RemoteGetMultimediaFilebyUserTokenAsync(LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteGetMultimediaFilebyUserTokenRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/WriteLog", ReplyAction="LiveMultimediaService/ILiveMultimediaService/WriteLogResponse")]
        void WriteLog(string UserToken, int IdTypeUser, string Site, string Procedure, string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/WriteLog", ReplyAction="LiveMultimediaService/ILiveMultimediaService/WriteLogResponse")]
        System.Threading.Tasks.Task WriteLogAsync(string UserToken, int IdTypeUser, string Site, string Procedure, string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/SendFile", ReplyAction="LiveMultimediaService/ILiveMultimediaService/SendFileResponse")]
        bool SendFile(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/SendFile", ReplyAction="LiveMultimediaService/ILiveMultimediaService/SendFileResponse")]
        System.Threading.Tasks.Task<bool> SendFileAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/ReadFile", ReplyAction="LiveMultimediaService/ILiveMultimediaService/ReadFileResponse")]
        System.IO.Stream ReadFile(string MultimediaFileGUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="LiveMultimediaService/ILiveMultimediaService/ReadFile", ReplyAction="LiveMultimediaService/ILiveMultimediaService/ReadFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> ReadFileAsync(string MultimediaFileGUID);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteRegisterNewUser", WrapperNamespace="LiveMultimediaService", IsWrapped=true)]
    public partial class RemoteRegisterNewUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=0)]
        public string FirstName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=1)]
        public string LastName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=2)]
        public string Username;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=3)]
        public string Password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=4)]
        public int IdTariffPlan;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=5)]
        public int IdLanguage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=6)]
        public string Message;
        
        public RemoteRegisterNewUserRequest() {
        }
        
        public RemoteRegisterNewUserRequest(string FirstName, string LastName, string Username, string Password, int IdTariffPlan, int IdLanguage, string Message) {
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.Username = Username;
            this.Password = Password;
            this.IdTariffPlan = IdTariffPlan;
            this.IdLanguage = IdLanguage;
            this.Message = Message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteRegisterNewUserResponse", WrapperNamespace="LiveMultimediaService", IsWrapped=true)]
    public partial class RemoteRegisterNewUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=0)]
        public string RemoteRegisterNewUserResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=1)]
        public string Message;
        
        public RemoteRegisterNewUserResponse() {
        }
        
        public RemoteRegisterNewUserResponse(string RemoteRegisterNewUserResult, string Message) {
            this.RemoteRegisterNewUserResult = RemoteRegisterNewUserResult;
            this.Message = Message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteSetMultimediaFilebyUserToken", WrapperNamespace="LiveMultimediaService", IsWrapped=true)]
    public partial class RemoteSetMultimediaFilebyUserTokenRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=0)]
        public string UserToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=1)]
        public string MultimediaFileGUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=2)]
        public byte[] buffer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=3)]
        public bool IsReadyServer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=4)]
        public long LengthFile;
        
        public RemoteSetMultimediaFilebyUserTokenRequest() {
        }
        
        public RemoteSetMultimediaFilebyUserTokenRequest(string UserToken, string MultimediaFileGUID, byte[] buffer, bool IsReadyServer, long LengthFile) {
            this.UserToken = UserToken;
            this.MultimediaFileGUID = MultimediaFileGUID;
            this.buffer = buffer;
            this.IsReadyServer = IsReadyServer;
            this.LengthFile = LengthFile;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteSetMultimediaFilebyUserTokenResponse", WrapperNamespace="LiveMultimediaService", IsWrapped=true)]
    public partial class RemoteSetMultimediaFilebyUserTokenResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=0)]
        public bool RemoteSetMultimediaFilebyUserTokenResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=1)]
        public bool IsReadyServer;
        
        public RemoteSetMultimediaFilebyUserTokenResponse() {
        }
        
        public RemoteSetMultimediaFilebyUserTokenResponse(bool RemoteSetMultimediaFilebyUserTokenResult, bool IsReadyServer) {
            this.RemoteSetMultimediaFilebyUserTokenResult = RemoteSetMultimediaFilebyUserTokenResult;
            this.IsReadyServer = IsReadyServer;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteGetMultimediaFilebyUserToken", WrapperNamespace="LiveMultimediaService", IsWrapped=true)]
    public partial class RemoteGetMultimediaFilebyUserTokenRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=0)]
        public string UserToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=1)]
        public string MultimediaFileGUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=2)]
        public byte[] MultimediaFileBuffer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=3)]
        public long MultimediaFileLength;
        
        public RemoteGetMultimediaFilebyUserTokenRequest() {
        }
        
        public RemoteGetMultimediaFilebyUserTokenRequest(string UserToken, string MultimediaFileGUID, byte[] MultimediaFileBuffer, long MultimediaFileLength) {
            this.UserToken = UserToken;
            this.MultimediaFileGUID = MultimediaFileGUID;
            this.MultimediaFileBuffer = MultimediaFileBuffer;
            this.MultimediaFileLength = MultimediaFileLength;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteGetMultimediaFilebyUserTokenResponse", WrapperNamespace="LiveMultimediaService", IsWrapped=true)]
    public partial class RemoteGetMultimediaFilebyUserTokenResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=0)]
        public bool RemoteGetMultimediaFilebyUserTokenResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=1)]
        public byte[] MultimediaFileBuffer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="LiveMultimediaService", Order=2)]
        public long MultimediaFileLength;
        
        public RemoteGetMultimediaFilebyUserTokenResponse() {
        }
        
        public RemoteGetMultimediaFilebyUserTokenResponse(bool RemoteGetMultimediaFilebyUserTokenResult, byte[] MultimediaFileBuffer, long MultimediaFileLength) {
            this.RemoteGetMultimediaFilebyUserTokenResult = RemoteGetMultimediaFilebyUserTokenResult;
            this.MultimediaFileBuffer = MultimediaFileBuffer;
            this.MultimediaFileLength = MultimediaFileLength;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILiveMultimediaServiceChannel : LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.ILiveMultimediaService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LiveMultimediaServiceClient : System.ServiceModel.ClientBase<LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.ILiveMultimediaService>, LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.ILiveMultimediaService {
        
        public LiveMultimediaServiceClient() {
        }
        
        public LiveMultimediaServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LiveMultimediaServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LiveMultimediaServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LiveMultimediaServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string LocalLogin(string Username, string Password) {
            return base.Channel.LocalLogin(Username, Password);
        }
        
        public System.Threading.Tasks.Task<string> LocalLoginAsync(string Username, string Password) {
            return base.Channel.LocalLoginAsync(Username, Password);
        }
        
        public string LocalCheckRequestMultimediaFromServer(string UserToken) {
            return base.Channel.LocalCheckRequestMultimediaFromServer(UserToken);
        }
        
        public System.Threading.Tasks.Task<string> LocalCheckRequestMultimediaFromServerAsync(string UserToken) {
            return base.Channel.LocalCheckRequestMultimediaFromServerAsync(UserToken);
        }
        
        public LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.MultimediaFile[] LocalGetListMultimediaFiles(string UserToken) {
            return base.Channel.LocalGetListMultimediaFiles(UserToken);
        }
        
        public System.Threading.Tasks.Task<LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.MultimediaFile[]> LocalGetListMultimediaFilesAsync(string UserToken) {
            return base.Channel.LocalGetListMultimediaFilesAsync(UserToken);
        }
        
        public void LocalSaveListMultimediaFiles(string UserToken, string[] ListMultimediaFiles) {
            base.Channel.LocalSaveListMultimediaFiles(UserToken, ListMultimediaFiles);
        }
        
        public System.Threading.Tasks.Task LocalSaveListMultimediaFilesAsync(string UserToken, string[] ListMultimediaFiles) {
            return base.Channel.LocalSaveListMultimediaFilesAsync(UserToken, ListMultimediaFiles);
        }
        
        public string RemoteLogin(string Username, string Password) {
            return base.Channel.RemoteLogin(Username, Password);
        }
        
        public System.Threading.Tasks.Task<string> RemoteLoginAsync(string Username, string Password) {
            return base.Channel.RemoteLoginAsync(Username, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteRegisterNewUserResponse LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.ILiveMultimediaService.RemoteRegisterNewUser(LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteRegisterNewUserRequest request) {
            return base.Channel.RemoteRegisterNewUser(request);
        }
        
        public string RemoteRegisterNewUser(string FirstName, string LastName, string Username, string Password, int IdTariffPlan, int IdLanguage, ref string Message) {
            LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteRegisterNewUserRequest inValue = new LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteRegisterNewUserRequest();
            inValue.FirstName = FirstName;
            inValue.LastName = LastName;
            inValue.Username = Username;
            inValue.Password = Password;
            inValue.IdTariffPlan = IdTariffPlan;
            inValue.IdLanguage = IdLanguage;
            inValue.Message = Message;
            LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteRegisterNewUserResponse retVal = ((LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.ILiveMultimediaService)(this)).RemoteRegisterNewUser(inValue);
            Message = retVal.Message;
            return retVal.RemoteRegisterNewUserResult;
        }
        
        public System.Threading.Tasks.Task<LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteRegisterNewUserResponse> RemoteRegisterNewUserAsync(LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteRegisterNewUserRequest request) {
            return base.Channel.RemoteRegisterNewUserAsync(request);
        }
        
        public void RemoteTransferMultimediaFileGUIDFromServerToClient(string UserToken, string MultimediaFileGUID, LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.ClientInternetBrowser ClientBrowser) {
            base.Channel.RemoteTransferMultimediaFileGUIDFromServerToClient(UserToken, MultimediaFileGUID, ClientBrowser);
        }
        
        public System.Threading.Tasks.Task RemoteTransferMultimediaFileGUIDFromServerToClientAsync(string UserToken, string MultimediaFileGUID, LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.ClientInternetBrowser ClientBrowser) {
            return base.Channel.RemoteTransferMultimediaFileGUIDFromServerToClientAsync(UserToken, MultimediaFileGUID, ClientBrowser);
        }
        
        public int InsertMessageStreamChunkCount(string UserToken, byte[] buffer, string MultimediaFileGUID, bool isFinalTransaction, bool isFirstCall, long LengthFile, long Position, int ChunkCount) {
            return base.Channel.InsertMessageStreamChunkCount(UserToken, buffer, MultimediaFileGUID, isFinalTransaction, isFirstCall, LengthFile, Position, ChunkCount);
        }
        
        public System.Threading.Tasks.Task<int> InsertMessageStreamChunkCountAsync(string UserToken, byte[] buffer, string MultimediaFileGUID, bool isFinalTransaction, bool isFirstCall, long LengthFile, long Position, int ChunkCount) {
            return base.Channel.InsertMessageStreamChunkCountAsync(UserToken, buffer, MultimediaFileGUID, isFinalTransaction, isFirstCall, LengthFile, Position, ChunkCount);
        }
        
        public void RemoteLiveMultimedia_Next(string UserToken, string MultimediaFileGUID, LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.ClientInternetBrowser ClientBrowser) {
            base.Channel.RemoteLiveMultimedia_Next(UserToken, MultimediaFileGUID, ClientBrowser);
        }
        
        public System.Threading.Tasks.Task RemoteLiveMultimedia_NextAsync(string UserToken, string MultimediaFileGUID, LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.ClientInternetBrowser ClientBrowser) {
            return base.Channel.RemoteLiveMultimedia_NextAsync(UserToken, MultimediaFileGUID, ClientBrowser);
        }
        
        public void RemoteLiveMultimedia_Unload(string UserToken, string MultimediaFileGUID) {
            base.Channel.RemoteLiveMultimedia_Unload(UserToken, MultimediaFileGUID);
        }
        
        public System.Threading.Tasks.Task RemoteLiveMultimedia_UnloadAsync(string UserToken, string MultimediaFileGUID) {
            return base.Channel.RemoteLiveMultimedia_UnloadAsync(UserToken, MultimediaFileGUID);
        }
        
        public string[] RemoteGetContentMultimediaSource(string UserToken, int IdMultimediaSource) {
            return base.Channel.RemoteGetContentMultimediaSource(UserToken, IdMultimediaSource);
        }
        
        public System.Threading.Tasks.Task<string[]> RemoteGetContentMultimediaSourceAsync(string UserToken, int IdMultimediaSource) {
            return base.Channel.RemoteGetContentMultimediaSourceAsync(UserToken, IdMultimediaSource);
        }
        
        public LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.MultimediaSource[] GetListMultimediaSource(string UserToken) {
            return base.Channel.GetListMultimediaSource(UserToken);
        }
        
        public System.Threading.Tasks.Task<LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.MultimediaSource[]> GetListMultimediaSourceAsync(string UserToken) {
            return base.Channel.GetListMultimediaSourceAsync(UserToken);
        }
        
        public LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.MultimediaFile[] GetListMultimediaByAlbum(string UserToken, string Album) {
            return base.Channel.GetListMultimediaByAlbum(UserToken, Album);
        }
        
        public System.Threading.Tasks.Task<LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.MultimediaFile[]> GetListMultimediaByAlbumAsync(string UserToken, string Album) {
            return base.Channel.GetListMultimediaByAlbumAsync(UserToken, Album);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteSetMultimediaFilebyUserTokenResponse LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.ILiveMultimediaService.RemoteSetMultimediaFilebyUserToken(LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteSetMultimediaFilebyUserTokenRequest request) {
            return base.Channel.RemoteSetMultimediaFilebyUserToken(request);
        }
        
        public bool RemoteSetMultimediaFilebyUserToken(string UserToken, string MultimediaFileGUID, byte[] buffer, ref bool IsReadyServer, long LengthFile) {
            LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteSetMultimediaFilebyUserTokenRequest inValue = new LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteSetMultimediaFilebyUserTokenRequest();
            inValue.UserToken = UserToken;
            inValue.MultimediaFileGUID = MultimediaFileGUID;
            inValue.buffer = buffer;
            inValue.IsReadyServer = IsReadyServer;
            inValue.LengthFile = LengthFile;
            LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteSetMultimediaFilebyUserTokenResponse retVal = ((LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.ILiveMultimediaService)(this)).RemoteSetMultimediaFilebyUserToken(inValue);
            IsReadyServer = retVal.IsReadyServer;
            return retVal.RemoteSetMultimediaFilebyUserTokenResult;
        }
        
        public System.Threading.Tasks.Task<LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteSetMultimediaFilebyUserTokenResponse> RemoteSetMultimediaFilebyUserTokenAsync(LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteSetMultimediaFilebyUserTokenRequest request) {
            return base.Channel.RemoteSetMultimediaFilebyUserTokenAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteGetMultimediaFilebyUserTokenResponse LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.ILiveMultimediaService.RemoteGetMultimediaFilebyUserToken(LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteGetMultimediaFilebyUserTokenRequest request) {
            return base.Channel.RemoteGetMultimediaFilebyUserToken(request);
        }
        
        public bool RemoteGetMultimediaFilebyUserToken(string UserToken, string MultimediaFileGUID, ref byte[] MultimediaFileBuffer, ref long MultimediaFileLength) {
            LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteGetMultimediaFilebyUserTokenRequest inValue = new LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteGetMultimediaFilebyUserTokenRequest();
            inValue.UserToken = UserToken;
            inValue.MultimediaFileGUID = MultimediaFileGUID;
            inValue.MultimediaFileBuffer = MultimediaFileBuffer;
            inValue.MultimediaFileLength = MultimediaFileLength;
            LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteGetMultimediaFilebyUserTokenResponse retVal = ((LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.ILiveMultimediaService)(this)).RemoteGetMultimediaFilebyUserToken(inValue);
            MultimediaFileBuffer = retVal.MultimediaFileBuffer;
            MultimediaFileLength = retVal.MultimediaFileLength;
            return retVal.RemoteGetMultimediaFilebyUserTokenResult;
        }
        
        public System.Threading.Tasks.Task<LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteGetMultimediaFilebyUserTokenResponse> RemoteGetMultimediaFilebyUserTokenAsync(LiveMultimediaHttpHandler.LiveMultimediaServiceReferenceWeb.RemoteGetMultimediaFilebyUserTokenRequest request) {
            return base.Channel.RemoteGetMultimediaFilebyUserTokenAsync(request);
        }
        
        public void WriteLog(string UserToken, int IdTypeUser, string Site, string Procedure, string Message) {
            base.Channel.WriteLog(UserToken, IdTypeUser, Site, Procedure, Message);
        }
        
        public System.Threading.Tasks.Task WriteLogAsync(string UserToken, int IdTypeUser, string Site, string Procedure, string Message) {
            return base.Channel.WriteLogAsync(UserToken, IdTypeUser, Site, Procedure, Message);
        }
        
        public bool SendFile(System.IO.Stream stream) {
            return base.Channel.SendFile(stream);
        }
        
        public System.Threading.Tasks.Task<bool> SendFileAsync(System.IO.Stream stream) {
            return base.Channel.SendFileAsync(stream);
        }
        
        public System.IO.Stream ReadFile(string MultimediaFileGUID) {
            return base.Channel.ReadFile(MultimediaFileGUID);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> ReadFileAsync(string MultimediaFileGUID) {
            return base.Channel.ReadFileAsync(MultimediaFileGUID);
        }
    }
}
